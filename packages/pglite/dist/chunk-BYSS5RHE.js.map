{"version":3,"sources":["../src/templating.ts"],"sourcesContent":["const TemplateType = {\n  part: 'part',\n  container: 'container',\n} as const\n\ninterface TemplatePart {\n  _templateType: typeof TemplateType.part\n  str: string\n}\n\ninterface TemplateContainer {\n  _templateType: typeof TemplateType.container\n  strings: TemplateStringsArray\n  values: any[]\n}\n\ninterface TemplatedQuery {\n  query: string\n  params: any[]\n}\n\nfunction addToLastAndPushWithSuffix(\n  arr: string[],\n  suffix: string,\n  ...values: string[]\n) {\n  const lastArrIdx = arr.length - 1\n  const lastValIdx = values.length - 1\n\n  // no-op\n  if (lastValIdx === -1) return\n\n  // overwrite last element\n  if (lastValIdx === 0) {\n    arr[lastArrIdx] = arr[lastArrIdx] + values[0] + suffix\n    return\n  }\n\n  // sandwich values between array and suffix\n  arr[lastArrIdx] = arr[lastArrIdx] + values[0]\n  arr.push(...values.slice(1, lastValIdx))\n  arr.push(values[lastValIdx] + suffix)\n}\n\n/**\n * Templating utility that allows nesting multiple SQL strings without\n * losing the automatic parametrization capabilities of {@link query}.\n *\n * @example\n * ```ts\n * query`SELECT * FROM tale ${withFilter ? sql`WHERE foo = ${fooVar}` : sql``}`\n * // > { query: 'SELECT * FROM tale WHERE foo = $1', params: [fooVar] }\n * // or\n * // > { query: 'SELECT * FROM tale', params: [] }\n * ```\n */\nexport function sql(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplateContainer {\n  const parsedStrings = [strings[0]] as string[] & {\n    raw: string[]\n  }\n  parsedStrings.raw = [strings.raw[0]]\n\n  const parsedValues: any[] = []\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n    const nextStringIdx = i + 1\n\n    // if value is a template tag, collapse into last string\n    if (value?._templateType === TemplateType.part) {\n      addToLastAndPushWithSuffix(\n        parsedStrings,\n        strings[nextStringIdx],\n        value.str,\n      )\n      addToLastAndPushWithSuffix(\n        parsedStrings.raw,\n        strings.raw[nextStringIdx],\n        value.str,\n      )\n      continue\n    }\n\n    // if value is an output of this method, append in place\n    if (value?._templateType === TemplateType.container) {\n      addToLastAndPushWithSuffix(\n        parsedStrings,\n        strings[nextStringIdx],\n        ...value.strings,\n      )\n      addToLastAndPushWithSuffix(\n        parsedStrings.raw,\n        strings.raw[nextStringIdx],\n        ...value.strings.raw,\n      )\n      parsedValues.push(...value.values)\n      continue\n    }\n\n    // otherwise keep reconstructing\n    parsedStrings.push(strings[nextStringIdx])\n    parsedStrings.raw.push(strings.raw[nextStringIdx])\n    parsedValues.push(value)\n  }\n\n  return {\n    _templateType: 'container',\n    strings: parsedStrings,\n    values: parsedValues,\n  }\n}\n\n/**\n * Allows adding identifiers into a query template string without\n * parametrizing them. This method will automatically escape identifiers.\n *\n * @example\n * ```ts\n * query`SELECT * FROM ${identifier`foo`} WHERE ${identifier`id`} = ${id}`\n * // > { query: 'SELECT * FROM \"foo\" WHERE \"id\" = $1', params: [id] }\n * ```\n */\nexport function identifier(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatePart {\n  return {\n    _templateType: 'part',\n    str: `\"${String.raw(strings, ...values)}\"`,\n  }\n}\n\n/**\n * Allows adding raw strings into a query template string without\n * parametrizing or modifying them in any way.\n *\n * @example\n * ```ts\n * query`SELECT * FROM foo ${raw`WHERE id = ${2+3}`}`\n * // > { query: 'SELECT * FROM foo WHERE id = 5', params: [] }\n * ```\n */\n\nexport function raw(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatePart {\n  return {\n    _templateType: 'part',\n    str: String.raw(strings, ...values),\n  }\n}\n\n/**\n * Generates a parametrized query from a templated query string, assigning\n * the provided values to the appropriate named parameters.\n *\n * You can use templating helpers like {@link identifier} and {@link raw} to\n * add identifiers and raw strings to the query without making them parameters,\n * and you can use {@link sql} to nest multiple queries and create utilities.\n *\n * @example\n * ```ts\n * query`SELECT * FROM ${identifier`foo`} WHERE id = ${id} and name = ${name}`\n * // > { query: 'SELECT * FROM \"foo\" WHERE id = $1 and name = $2', params: [id, name] }\n * ```\n */\nexport function query(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatedQuery {\n  const { strings: queryStringParts, values: params } = sql(strings, ...values)\n  return {\n    query: [\n      queryStringParts[0],\n      ...params.flatMap((_, idx) => [`$${idx + 1}`, queryStringParts[idx + 1]]),\n    ].join(''),\n    params: params,\n  }\n}\n"],"mappings":";;;;;AAAA;AAAA,IAAM,eAAe;AAAA,EACnB,MAAM;AAAA,EACN,WAAW;AACb;AAkBA,SAAS,2BACP,KACA,WACG,QACH;AACA,QAAM,aAAa,IAAI,SAAS;AAChC,QAAM,aAAa,OAAO,SAAS;AAGnC,MAAI,eAAe,GAAI;AAGvB,MAAI,eAAe,GAAG;AACpB,QAAI,UAAU,IAAI,IAAI,UAAU,IAAI,OAAO,CAAC,IAAI;AAChD;AAAA,EACF;AAGA,MAAI,UAAU,IAAI,IAAI,UAAU,IAAI,OAAO,CAAC;AAC5C,MAAI,KAAK,GAAG,OAAO,MAAM,GAAG,UAAU,CAAC;AACvC,MAAI,KAAK,OAAO,UAAU,IAAI,MAAM;AACtC;AAcO,SAAS,IACd,YACG,QACgB;AACnB,QAAM,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAGjC,gBAAc,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;AAEnC,QAAM,eAAsB,CAAC;AAC7B,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,QAAQ,OAAO,CAAC;AACtB,UAAM,gBAAgB,IAAI;AAG1B,QAAI,OAAO,kBAAkB,aAAa,MAAM;AAC9C;AAAA,QACE;AAAA,QACA,QAAQ,aAAa;AAAA,QACrB,MAAM;AAAA,MACR;AACA;AAAA,QACE,cAAc;AAAA,QACd,QAAQ,IAAI,aAAa;AAAA,QACzB,MAAM;AAAA,MACR;AACA;AAAA,IACF;AAGA,QAAI,OAAO,kBAAkB,aAAa,WAAW;AACnD;AAAA,QACE;AAAA,QACA,QAAQ,aAAa;AAAA,QACrB,GAAG,MAAM;AAAA,MACX;AACA;AAAA,QACE,cAAc;AAAA,QACd,QAAQ,IAAI,aAAa;AAAA,QACzB,GAAG,MAAM,QAAQ;AAAA,MACnB;AACA,mBAAa,KAAK,GAAG,MAAM,MAAM;AACjC;AAAA,IACF;AAGA,kBAAc,KAAK,QAAQ,aAAa,CAAC;AACzC,kBAAc,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC;AACjD,iBAAa,KAAK,KAAK;AAAA,EACzB;AAEA,SAAO;AAAA,IACL,eAAe;AAAA,IACf,SAAS;AAAA,IACT,QAAQ;AAAA,EACV;AACF;AAYO,SAAS,WACd,YACG,QACW;AACd,SAAO;AAAA,IACL,eAAe;AAAA,IACf,KAAK,IAAI,OAAO,IAAI,SAAS,GAAG,MAAM,CAAC;AAAA,EACzC;AACF;AAaO,SAAS,IACd,YACG,QACW;AACd,SAAO;AAAA,IACL,eAAe;AAAA,IACf,KAAK,OAAO,IAAI,SAAS,GAAG,MAAM;AAAA,EACpC;AACF;AAgBO,SAAS,MACd,YACG,QACa;AAChB,QAAM,EAAE,SAAS,kBAAkB,QAAQ,OAAO,IAAI,IAAI,SAAS,GAAG,MAAM;AAC5E,SAAO;AAAA,IACL,OAAO;AAAA,MACL,iBAAiB,CAAC;AAAA,MAClB,GAAG,OAAO,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,IAAI,iBAAiB,MAAM,CAAC,CAAC,CAAC;AAAA,IAC1E,EAAE,KAAK,EAAE;AAAA,IACT;AAAA,EACF;AACF;","names":[]}