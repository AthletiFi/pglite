{"version":3,"sources":["../../src/fs/nodefs.ts"],"sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport { EmscriptenBuiltinFilesystem, PGDATA } from './base.js'\nimport type { PostgresMod } from '../postgresMod.js'\nimport { PGlite } from '../pglite.js'\n\nexport class NodeFS extends EmscriptenBuiltinFilesystem {\n  protected rootDir: string\n\n  constructor(dataDir: string) {\n    super(dataDir)\n    this.rootDir = path.resolve(dataDir)\n    if (!fs.existsSync(path.join(this.rootDir))) {\n      fs.mkdirSync(this.rootDir)\n    }\n  }\n\n  async init(pg: PGlite, opts: Partial<PostgresMod>) {\n    this.pg = pg\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: any) => {\n          const nodefs = mod.FS.filesystems.NODEFS\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(nodefs, { root: this.rootDir }, PGDATA)\n        },\n      ],\n    }\n    return { emscriptenOpts: options }\n  }\n\n  async closeFs(): Promise<void> {\n    this.pg!.Module.FS.quit()\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;AAAA,YAAY,QAAQ;AACpB,YAAY,UAAU;AAKf,IAAM,SAAN,cAAqB,4BAA4B;AAAA,EAGtD,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,UAAe,aAAQ,OAAO;AACnC,QAAI,CAAI,cAAgB,UAAK,KAAK,OAAO,CAAC,GAAG;AAC3C,MAAG,aAAU,KAAK,OAAO;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,MAAM,KAAK,IAAY,MAA4B;AACjD,SAAK,KAAK;AACV,UAAM,UAAgC;AAAA,MACpC,GAAG;AAAA,MACH,QAAQ;AAAA,QACN,GAAI,KAAK,UAAU,CAAC;AAAA,QACpB,CAAC,QAAa;AACZ,gBAAM,SAAS,IAAI,GAAG,YAAY;AAClC,cAAI,GAAG,MAAM,MAAM;AACnB,cAAI,GAAG,MAAM,QAAQ,EAAE,MAAM,KAAK,QAAQ,GAAG,MAAM;AAAA,QACrD;AAAA,MACF;AAAA,IACF;AACA,WAAO,EAAE,gBAAgB,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,UAAyB;AAC7B,SAAK,GAAI,OAAO,GAAG,KAAK;AAAA,EAC1B;AACF;","names":[]}