{"version":3,"sources":["../../src/worker/index.ts","../../../../node_modules/.pnpm/tsup@8.3.0_@microsoft+api-extractor@7.47.7_@types+node@20.16.11__postcss@8.4.47_tsx@4.19.1_typescript@5.6.3/node_modules/tsup/assets/cjs_shims.js","../../src/templating.ts","../../src/types.ts","../../src/parse.ts","../../../pg-protocol/src/string-utils.ts","../../../pg-protocol/src/buffer-writer.ts","../../../pg-protocol/src/serializer.ts","../../../pg-protocol/src/buffer-reader.ts","../../../pg-protocol/src/parser.ts","../../src/base.ts","../../src/utils.ts"],"sourcesContent":["import type {\n  DebugLevel,\n  ExecProtocolResult,\n  Extensions,\n  PGliteInterface,\n  PGliteInterfaceExtensions,\n  PGliteOptions,\n} from '../interface.js'\nimport type { PGlite } from '../pglite.js'\nimport { BasePGlite } from '../base.js'\nimport { uuid } from '../utils.js'\n\nexport type PGliteWorkerOptions = PGliteOptions & {\n  meta?: any\n  id?: string\n}\n\nexport class PGliteWorker\n  extends BasePGlite\n  implements PGliteInterface, AsyncDisposable\n{\n  #initPromise: Promise<void>\n  #debug: DebugLevel = 0\n\n  #ready = false\n  #closed = false\n  #isLeader = false\n\n  #eventTarget = new EventTarget()\n\n  #tabId: string\n\n  #connected = false\n\n  #workerProcess: Worker\n  #workerID?: string\n  #workerHerePromise?: Promise<void>\n  #workerReadyPromise?: Promise<void>\n\n  #broadcastChannel?: BroadcastChannel\n  #tabChannel?: BroadcastChannel\n  #releaseTabCloseLock?: () => void\n\n  #notifyListeners = new Map<string, Set<(payload: string) => void>>()\n  #globalNotifyListeners = new Set<(channel: string, payload: string) => void>()\n\n  #extensions: Extensions\n  #extensionsClose: Array<() => Promise<void>> = []\n\n  constructor(worker: Worker, options?: PGliteWorkerOptions) {\n    super()\n    this.#workerProcess = worker\n    this.#tabId = uuid()\n    this.#extensions = options?.extensions ?? {}\n\n    this.#workerHerePromise = new Promise<void>((resolve) => {\n      this.#workerProcess.addEventListener(\n        'message',\n        (event) => {\n          if (event.data.type === 'here') {\n            resolve()\n          } else {\n            throw new Error('Invalid message')\n          }\n        },\n        { once: true },\n      )\n    })\n\n    this.#workerReadyPromise = new Promise<void>((resolve) => {\n      const callback = (event: MessageEvent<any>) => {\n        if (event.data.type === 'ready') {\n          this.#workerID = event.data.id\n          this.#workerProcess.removeEventListener('message', callback)\n          resolve()\n        }\n      }\n      this.#workerProcess.addEventListener('message', callback)\n    })\n\n    this.#initPromise = this.#init(options)\n  }\n\n  /**\n   * Create a new PGlite instance with extensions on the Typescript interface\n   * This also awaits the instance to be ready before resolving\n   * (The main constructor does enable extensions, however due to the limitations\n   * of Typescript, the extensions are not available on the instance interface)\n   * @param worker The worker to use\n   * @param options Optional options\n   * @returns A promise that resolves to the PGlite instance when it's ready.\n   */\n  static async create<O extends PGliteWorkerOptions>(\n    worker: Worker,\n    options?: O,\n  ): Promise<PGliteWorker & PGliteInterfaceExtensions<O['extensions']>> {\n    const pg = new PGliteWorker(worker, options)\n    await pg.#initPromise\n    return pg as PGliteWorker & PGliteInterfaceExtensions<O['extensions']>\n  }\n\n  async #init(options: PGliteWorkerOptions = {}) {\n    // Setup the extensions\n    for (const [extName, ext] of Object.entries(this.#extensions)) {\n      if (ext instanceof URL) {\n        throw new Error(\n          'URL extensions are not supported on the client side of a worker',\n        )\n      } else {\n        const extRet = await ext.setup(this, {}, true)\n        if (extRet.emscriptenOpts) {\n          console.warn(\n            `PGlite extension ${extName} returned emscriptenOpts, these are not supported on the client side of a worker`,\n          )\n        }\n        if (extRet.namespaceObj) {\n          const instance = this as any\n          instance[extName] = extRet.namespaceObj\n        }\n        if (extRet.bundlePath) {\n          console.warn(\n            `PGlite extension ${extName} returned bundlePath, this is not supported on the client side of a worker`,\n          )\n        }\n        if (extRet.init) {\n          await extRet.init()\n        }\n        if (extRet.close) {\n          this.#extensionsClose.push(extRet.close)\n        }\n      }\n    }\n\n    // Wait for the worker let us know it's here\n    await this.#workerHerePromise\n\n    // Send the worker the options\n    const { extensions: _, ...workerOptions } = options\n    this.#workerProcess.postMessage({\n      type: 'init',\n      options: workerOptions,\n    })\n\n    // Wait for the worker let us know it's ready\n    await this.#workerReadyPromise\n\n    // Acquire the tab close lock, this is released then the tab, or this\n    // PGliteWorker instance, is closed\n    const tabCloseLockId = `pglite-tab-close:${this.#tabId}`\n    this.#releaseTabCloseLock = await acquireLock(tabCloseLockId)\n\n    // Start the broadcast channel used to communicate with tabs and leader election\n    const broadcastChannelId = `pglite-broadcast:${this.#workerID}`\n    this.#broadcastChannel = new BroadcastChannel(broadcastChannelId)\n\n    // Start the tab channel used to communicate with the leader directly\n    const tabChannelId = `pglite-tab:${this.#tabId}`\n    this.#tabChannel = new BroadcastChannel(tabChannelId)\n\n    this.#broadcastChannel.addEventListener('message', async (event) => {\n      if (event.data.type === 'leader-here') {\n        this.#connected = false\n        this.#eventTarget.dispatchEvent(new Event('leader-change'))\n        this.#leaderNotifyLoop()\n      } else if (event.data.type === 'notify') {\n        this.#receiveNotification(event.data.channel, event.data.payload)\n      }\n    })\n\n    this.#tabChannel.addEventListener('message', async (event) => {\n      if (event.data.type === 'connected') {\n        this.#connected = true\n        this.#eventTarget.dispatchEvent(new Event('connected'))\n        this.#debug = await this.#rpc('getDebugLevel')\n        this.#ready = true\n      }\n    })\n\n    this.#workerProcess.addEventListener('message', async (event) => {\n      if (event.data.type === 'leader-now') {\n        this.#isLeader = true\n        this.#eventTarget.dispatchEvent(new Event('leader-change'))\n      }\n    })\n\n    this.#leaderNotifyLoop()\n\n    // Init array types\n    // We don't await this as it will result in a deadlock\n    // It immediately takes out the transaction lock as so another query\n    this._initArrayTypes()\n  }\n\n  async #leaderNotifyLoop() {\n    if (!this.#connected) {\n      this.#broadcastChannel!.postMessage({\n        type: 'tab-here',\n        id: this.#tabId,\n      })\n      setTimeout(() => this.#leaderNotifyLoop(), 16)\n    }\n  }\n\n  async #rpc<Method extends WorkerRpcMethod>(\n    method: Method,\n    ...args: Parameters<WorkerApi[Method]>\n  ): Promise<ReturnType<WorkerApi[Method]>> {\n    const callId = uuid()\n    const message: WorkerRpcCall<Method> = {\n      type: 'rpc-call',\n      callId,\n      method,\n      args,\n    }\n    this.#tabChannel!.postMessage(message)\n    return await new Promise<ReturnType<WorkerApi[Method]>>(\n      (resolve, reject) => {\n        const listener = (event: MessageEvent) => {\n          if (event.data.callId !== callId) return\n          cleanup()\n          const message: WorkerRpcResponse<Method> = event.data\n          if (message.type === 'rpc-return') {\n            resolve(message.result)\n          } else if (message.type === 'rpc-error') {\n            const error = new Error(message.error.message)\n            Object.assign(error, message.error)\n            reject(error)\n          } else {\n            reject(new Error('Invalid message'))\n          }\n        }\n        const leaderChangeListener = () => {\n          // If the leader changes, throw an error to reject the promise\n          cleanup()\n          reject(new LeaderChangedError())\n        }\n        const cleanup = () => {\n          this.#tabChannel!.removeEventListener('message', listener)\n          this.#eventTarget.removeEventListener(\n            'leader-change',\n            leaderChangeListener,\n          )\n        }\n        this.#eventTarget.addEventListener(\n          'leader-change',\n          leaderChangeListener,\n        )\n        this.#tabChannel!.addEventListener('message', listener)\n      },\n    )\n  }\n\n  get waitReady() {\n    return new Promise<void>((resolve) => {\n      this.#initPromise.then(() => {\n        if (!this.#connected) {\n          resolve(\n            new Promise<void>((resolve) => {\n              this.#eventTarget.addEventListener('connected', () => {\n                resolve()\n              })\n            }),\n          )\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  get debug() {\n    return this.#debug\n  }\n\n  /**\n   * The ready state of the database\n   */\n  get ready() {\n    return this.#ready\n  }\n\n  /**\n   * The closed state of the database\n   */\n  get closed() {\n    return this.#closed\n  }\n\n  /**\n   * The leader state of this tab\n   */\n  get isLeader() {\n    return this.#isLeader\n  }\n\n  /**\n   * Close the database\n   * @returns Promise that resolves when the connection to shared PGlite is closed\n   */\n  async close() {\n    if (this.#closed) {\n      return\n    }\n    this.#closed = true\n    this.#broadcastChannel?.close()\n    this.#tabChannel?.close()\n    this.#releaseTabCloseLock?.()\n    this.#workerProcess.terminate()\n  }\n\n  /**\n   * Close the database when the object exits scope\n   * Stage 3 ECMAScript Explicit Resource Management\n   * https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management\n   */\n  async [Symbol.asyncDispose]() {\n    await this.close()\n  }\n\n  /**\n   * Execute a postgres wire protocol message directly without wrapping the response.\n   * Only use if `execProtocol()` doesn't suite your needs.\n   *\n   * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,\n   * transactions, and notification listeners. Only use if you need to bypass these wrappers and\n   * don't intend to use the above features.\n   *\n   * @param message The postgres wire protocol message to execute\n   * @returns The direct message data response produced by Postgres\n   */\n  async execProtocolRaw(message: Uint8Array): Promise<Uint8Array> {\n    return (await this.#rpc('execProtocolRaw', message)) as Uint8Array\n  }\n\n  /**\n   * Execute a postgres wire protocol message\n   * @param message The postgres wire protocol message to execute\n   * @returns The result of the query\n   */\n  async execProtocol(message: Uint8Array): Promise<ExecProtocolResult> {\n    return await this.#rpc('execProtocol', message)\n  }\n\n  /**\n   * Sync the database to the filesystem\n   * @returns Promise that resolves when the database is synced to the filesystem\n   */\n  async syncToFs() {\n    await this.#rpc('syncToFs')\n  }\n\n  /**\n   * Listen for a notification\n   * @param channel The channel to listen on\n   * @param callback The callback to call when a notification is received\n   */\n  async listen(\n    channel: string,\n    callback: (payload: string) => void,\n  ): Promise<() => Promise<void>> {\n    await this.waitReady\n    if (!this.#notifyListeners.has(channel)) {\n      this.#notifyListeners.set(channel, new Set())\n    }\n    this.#notifyListeners.get(channel)?.add(callback)\n    await this.exec(`LISTEN ${channel}`)\n    return async () => {\n      await this.unlisten(channel, callback)\n    }\n  }\n\n  /**\n   * Stop listening for a notification\n   * @param channel The channel to stop listening on\n   * @param callback The callback to remove\n   */\n  async unlisten(\n    channel: string,\n    callback?: (payload: string) => void,\n  ): Promise<void> {\n    await this.waitReady\n    if (callback) {\n      this.#notifyListeners.get(channel)?.delete(callback)\n    } else {\n      this.#notifyListeners.delete(channel)\n    }\n    if (this.#notifyListeners.get(channel)?.size === 0) {\n      // As we currently have a dedicated worker we can just unlisten\n      await this.exec(`UNLISTEN ${channel}`)\n    }\n  }\n\n  /**\n   * Listen to notifications\n   * @param callback The callback to call when a notification is received\n   */\n  onNotification(callback: (channel: string, payload: string) => void) {\n    this.#globalNotifyListeners.add(callback)\n    return () => {\n      this.#globalNotifyListeners.delete(callback)\n    }\n  }\n\n  /**\n   * Stop listening to notifications\n   * @param callback The callback to remove\n   */\n  offNotification(callback: (channel: string, payload: string) => void) {\n    this.#globalNotifyListeners.delete(callback)\n  }\n\n  #receiveNotification(channel: string, payload: string) {\n    const listeners = this.#notifyListeners.get(channel)\n    if (listeners) {\n      for (const listener of listeners) {\n        queueMicrotask(() => listener(payload))\n      }\n    }\n    for (const listener of this.#globalNotifyListeners) {\n      queueMicrotask(() => listener(channel, payload))\n    }\n  }\n\n  async dumpDataDir(): Promise<File | Blob> {\n    return (await this.#rpc('dumpDataDir')) as File | Blob\n  }\n\n  onLeaderChange(callback: () => void) {\n    this.#eventTarget.addEventListener('leader-change', callback)\n    return () => {\n      this.#eventTarget.removeEventListener('leader-change', callback)\n    }\n  }\n\n  offLeaderChange(callback: () => void) {\n    this.#eventTarget.removeEventListener('leader-change', callback)\n  }\n\n  async _handleBlob(blob?: File | Blob): Promise<void> {\n    await this.#rpc('_handleBlob', blob)\n  }\n\n  async _getWrittenBlob(): Promise<File | Blob | undefined> {\n    return await this.#rpc('_getWrittenBlob')\n  }\n\n  async _cleanupBlob(): Promise<void> {\n    await this.#rpc('_cleanupBlob')\n  }\n\n  async _checkReady() {\n    await this.waitReady\n  }\n\n  async _runExclusiveQuery<T>(fn: () => Promise<T>): Promise<T> {\n    await this.#rpc('_acquireQueryLock')\n    try {\n      return await fn()\n    } finally {\n      await this.#rpc('_releaseQueryLock')\n    }\n  }\n\n  async _runExclusiveTransaction<T>(fn: () => Promise<T>): Promise<T> {\n    await this.#rpc('_acquireTransactionLock')\n    try {\n      return await fn()\n    } finally {\n      await this.#rpc('_releaseTransactionLock')\n    }\n  }\n}\n\nexport interface WorkerOptions {\n  init: (options: Exclude<PGliteWorkerOptions, 'extensions'>) => Promise<PGlite>\n}\n\nexport async function worker({ init }: WorkerOptions) {\n  // Send a message to the main thread to let it know we are here\n  postMessage({ type: 'here' })\n\n  // Await the main thread to send us the options\n  const options = await new Promise<Exclude<PGliteWorkerOptions, 'extensions'>>(\n    (resolve) => {\n      addEventListener(\n        'message',\n        (event) => {\n          if (event.data.type === 'init') {\n            resolve(event.data.options)\n          }\n        },\n        { once: true },\n      )\n    },\n  )\n\n  // ID for this multi-tab worker - this is used to identify the group of workers\n  // that are trying to elect a leader for a shared PGlite instance.\n  // It defaults to the URL of the worker, and the dataDir if provided\n  // but can be overridden by the options.\n  const id = options.id ?? `${import.meta.url}:${options.dataDir ?? ''}`\n\n  // Let the main thread know we are ready\n  postMessage({ type: 'ready', id })\n\n  const electionLockId = `pglite-election-lock:${id}`\n  const broadcastChannelId = `pglite-broadcast:${id}`\n  const broadcastChannel = new BroadcastChannel(broadcastChannelId)\n  const connectedTabs = new Set<string>()\n\n  // Await the main lock which is used to elect the leader\n  // We don't release this lock, its automatically released when the worker or\n  // tab is closed\n  await acquireLock(electionLockId)\n\n  // Now we are the leader, start the worker\n  const dbPromise = init(options)\n\n  // Start listening for messages from tabs\n  broadcastChannel.onmessage = async (event) => {\n    const msg = event.data\n    switch (msg.type) {\n      case 'tab-here':\n        // A new tab has joined,\n        connectTab(msg.id, await dbPromise, connectedTabs)\n        break\n    }\n  }\n\n  // Notify the other tabs that we are the leader\n  broadcastChannel.postMessage({ type: 'leader-here', id })\n\n  // Let the main thread know we are the leader\n  postMessage({ type: 'leader-now' })\n\n  const db = await dbPromise\n\n  // Listen for notifications and broadcast them to all tabs\n  db.onNotification((channel, payload) => {\n    broadcastChannel.postMessage({ type: 'notify', channel, payload })\n  })\n}\n\nfunction connectTab(tabId: string, pg: PGlite, connectedTabs: Set<string>) {\n  if (connectedTabs.has(tabId)) {\n    return\n  }\n  connectedTabs.add(tabId)\n  const tabChannelId = `pglite-tab:${tabId}`\n  const tabCloseLockId = `pglite-tab-close:${tabId}`\n  const tabChannel = new BroadcastChannel(tabChannelId)\n\n  // Use a tab close lock to unsubscribe the tab\n  navigator.locks.request(tabCloseLockId, () => {\n    return new Promise<void>((resolve) => {\n      // The tab has been closed, unsubscribe the tab broadcast channel\n      tabChannel.close()\n      connectedTabs.delete(tabId)\n      resolve()\n    })\n  })\n\n  const api = makeWorkerApi(tabId, pg)\n\n  tabChannel.addEventListener('message', async (event) => {\n    const msg = event.data\n    switch (msg.type) {\n      case 'rpc-call': {\n        await pg.waitReady\n        const { callId, method, args } = msg as WorkerRpcCall<WorkerRpcMethod>\n        try {\n          // @ts-ignore no apparent reason why it fails\n          const result = (await api[method](...args)) as WorkerRpcResult<\n            typeof method\n          >['result']\n          tabChannel.postMessage({\n            type: 'rpc-return',\n            callId,\n            result,\n          } satisfies WorkerRpcResult<typeof method>)\n        } catch (error) {\n          console.error(error)\n          tabChannel.postMessage({\n            type: 'rpc-error',\n            callId,\n            error: { message: (error as Error).message },\n          } satisfies WorkerRpcError)\n        }\n        break\n      }\n    }\n  })\n\n  // Send a message to the tab to let it know it's connected\n  tabChannel.postMessage({ type: 'connected' })\n}\n\nfunction makeWorkerApi(tabId: string, db: PGlite) {\n  let queryLockRelease: (() => void) | null = null\n  let transactionLockRelease: (() => void) | null = null\n\n  // If the tab is closed and it is holding a lock, release the the locks\n  // and rollback any pending transactions\n  const tabCloseLockId = `pglite-tab-close:${tabId}`\n  acquireLock(tabCloseLockId).then(() => {\n    if (transactionLockRelease) {\n      // rollback any pending transactions\n      db.exec('ROLLBACK')\n    }\n    queryLockRelease?.()\n    transactionLockRelease?.()\n  })\n\n  return {\n    async getDebugLevel() {\n      return db.debug\n    },\n    async close() {\n      await db.close()\n    },\n    async execProtocol(message: Uint8Array) {\n      const { messages, data } = await db.execProtocol(message)\n      if (data.byteLength !== data.buffer.byteLength) {\n        const buffer = new ArrayBuffer(data.byteLength)\n        const dataCopy = new Uint8Array(buffer)\n        dataCopy.set(data)\n        return { messages, data: dataCopy }\n      } else {\n        return { messages, data }\n      }\n    },\n    async execProtocolRaw(message: Uint8Array) {\n      const result = await db.execProtocolRaw(message)\n      if (result.byteLength !== result.buffer.byteLength) {\n        // The data is a slice of a larger buffer, this is potentially the whole\n        // memory of the WASM module. We copy it to a new Uint8Array and return that.\n        const buffer = new ArrayBuffer(result.byteLength)\n        const resultCopy = new Uint8Array(buffer)\n        resultCopy.set(result)\n        return resultCopy\n      } else {\n        return result\n      }\n    },\n    async dumpDataDir() {\n      return await db.dumpDataDir()\n    },\n    async syncToFs() {\n      return await db.syncToFs()\n    },\n    async _handleBlob(blob?: File | Blob) {\n      return await db._handleBlob(blob)\n    },\n    async _getWrittenBlob() {\n      return await db._getWrittenBlob()\n    },\n    async _cleanupBlob() {\n      return await db._cleanupBlob()\n    },\n    async _checkReady() {\n      return await db._checkReady()\n    },\n    async _acquireQueryLock() {\n      return new Promise<void>((resolve) => {\n        db._runExclusiveQuery(() => {\n          return new Promise<void>((release) => {\n            queryLockRelease = release\n            resolve()\n          })\n        })\n      })\n    },\n    async _releaseQueryLock() {\n      queryLockRelease?.()\n      queryLockRelease = null\n    },\n    async _acquireTransactionLock() {\n      return new Promise<void>((resolve) => {\n        db._runExclusiveTransaction(() => {\n          return new Promise<void>((release) => {\n            transactionLockRelease = release\n            resolve()\n          })\n        })\n      })\n    },\n    async _releaseTransactionLock() {\n      transactionLockRelease?.()\n      transactionLockRelease = null\n    },\n  }\n}\n\nexport class LeaderChangedError extends Error {\n  constructor() {\n    super('Leader changed, pending operation in indeterminate state')\n  }\n}\n\nasync function acquireLock(lockId: string) {\n  let release\n  await new Promise<void>((resolve) => {\n    navigator.locks.request(lockId, () => {\n      return new Promise<void>((releaseCallback) => {\n        release = releaseCallback\n        resolve()\n      })\n    })\n  })\n  return release\n}\n\ntype WorkerApi = ReturnType<typeof makeWorkerApi>\n\ntype WorkerRpcMethod = keyof WorkerApi\n\ntype WorkerRpcCall<Method extends WorkerRpcMethod> = {\n  type: 'rpc-call'\n  callId: string\n  method: Method\n  args: Parameters<WorkerApi[Method]>\n}\n\ntype WorkerRpcResult<Method extends WorkerRpcMethod> = {\n  type: 'rpc-return'\n  callId: string\n  result: ReturnType<WorkerApi[Method]>\n}\n\ntype WorkerRpcError = {\n  type: 'rpc-error'\n  callId: string\n  error: any\n}\n\ntype WorkerRpcResponse<Method extends WorkerRpcMethod> =\n  | WorkerRpcResult<Method>\n  | WorkerRpcError\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","const TemplateType = {\n  part: 'part',\n  container: 'container',\n} as const\n\ninterface TemplatePart {\n  _templateType: typeof TemplateType.part\n  str: string\n}\n\ninterface TemplateContainer {\n  _templateType: typeof TemplateType.container\n  strings: TemplateStringsArray\n  values: any[]\n}\n\ninterface TemplatedQuery {\n  query: string\n  params: any[]\n}\n\nfunction addToLastAndPushWithSuffix(\n  arr: string[],\n  suffix: string,\n  ...values: string[]\n) {\n  const lastArrIdx = arr.length - 1\n  const lastValIdx = values.length - 1\n\n  // no-op\n  if (lastValIdx === -1) return\n\n  // overwrite last element\n  if (lastValIdx === 0) {\n    arr[lastArrIdx] = arr[lastArrIdx] + values[0] + suffix\n    return\n  }\n\n  // sandwich values between array and suffix\n  arr[lastArrIdx] = arr[lastArrIdx] + values[0]\n  arr.push(...values.slice(1, lastValIdx))\n  arr.push(values[lastValIdx] + suffix)\n}\n\n/**\n * Templating utility that allows nesting multiple SQL strings without\n * losing the automatic parametrization capabilities of {@link query}.\n *\n * @example\n * ```ts\n * query`SELECT * FROM tale ${withFilter ? sql`WHERE foo = ${fooVar}` : sql``}`\n * // > { query: 'SELECT * FROM tale WHERE foo = $1', params: [fooVar] }\n * // or\n * // > { query: 'SELECT * FROM tale', params: [] }\n * ```\n */\nexport function sql(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplateContainer {\n  const parsedStrings = [strings[0]] as string[] & {\n    raw: string[]\n  }\n  parsedStrings.raw = [strings.raw[0]]\n\n  const parsedValues: any[] = []\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n    const nextStringIdx = i + 1\n\n    // if value is a template tag, collapse into last string\n    if (value?._templateType === TemplateType.part) {\n      addToLastAndPushWithSuffix(\n        parsedStrings,\n        strings[nextStringIdx],\n        value.str,\n      )\n      addToLastAndPushWithSuffix(\n        parsedStrings.raw,\n        strings.raw[nextStringIdx],\n        value.str,\n      )\n      continue\n    }\n\n    // if value is an output of this method, append in place\n    if (value?._templateType === TemplateType.container) {\n      addToLastAndPushWithSuffix(\n        parsedStrings,\n        strings[nextStringIdx],\n        ...value.strings,\n      )\n      addToLastAndPushWithSuffix(\n        parsedStrings.raw,\n        strings.raw[nextStringIdx],\n        ...value.strings.raw,\n      )\n      parsedValues.push(...value.values)\n      continue\n    }\n\n    // otherwise keep reconstructing\n    parsedStrings.push(strings[nextStringIdx])\n    parsedStrings.raw.push(strings.raw[nextStringIdx])\n    parsedValues.push(value)\n  }\n\n  return {\n    _templateType: 'container',\n    strings: parsedStrings,\n    values: parsedValues,\n  }\n}\n\n/**\n * Allows adding identifiers into a query template string without\n * parametrizing them. This method will automatically escape identifiers.\n *\n * @example\n * ```ts\n * query`SELECT * FROM ${identifier`foo`} WHERE ${identifier`id`} = ${id}`\n * // > { query: 'SELECT * FROM \"foo\" WHERE \"id\" = $1', params: [id] }\n * ```\n */\nexport function identifier(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatePart {\n  return {\n    _templateType: 'part',\n    str: `\"${String.raw(strings, ...values)}\"`,\n  }\n}\n\n/**\n * Allows adding raw strings into a query template string without\n * parametrizing or modifying them in any way.\n *\n * @example\n * ```ts\n * query`SELECT * FROM foo ${raw`WHERE id = ${2+3}`}`\n * // > { query: 'SELECT * FROM foo WHERE id = 5', params: [] }\n * ```\n */\n\nexport function raw(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatePart {\n  return {\n    _templateType: 'part',\n    str: String.raw(strings, ...values),\n  }\n}\n\n/**\n * Generates a parametrized query from a templated query string, assigning\n * the provided values to the appropriate named parameters.\n *\n * You can use templating helpers like {@link identifier} and {@link raw} to\n * add identifiers and raw strings to the query without making them parameters,\n * and you can use {@link sql} to nest multiple queries and create utilities.\n *\n * @example\n * ```ts\n * query`SELECT * FROM ${identifier`foo`} WHERE id = ${id} and name = ${name}`\n * // > { query: 'SELECT * FROM \"foo\" WHERE id = $1 and name = $2', params: [id, name] }\n * ```\n */\nexport function query(\n  strings: TemplateStringsArray,\n  ...values: any[]\n): TemplatedQuery {\n  const { strings: queryStringParts, values: params } = sql(strings, ...values)\n  return {\n    query: [\n      queryStringParts[0],\n      ...params.flatMap((_, idx) => [`$${idx + 1}`, queryStringParts[idx + 1]]),\n    ].join(''),\n    params: params,\n  }\n}\n","/*\nBased on postgres.js types.js\nhttps://github.com/porsager/postgres/blob/master/src/types.js\nPublished under the Unlicense:\nhttps://github.com/porsager/postgres/blob/master/UNLICENSE \n*/\n\nimport type { ParserOptions } from './interface.js'\n\nconst JSON_parse = globalThis.JSON.parse\nconst JSON_stringify = globalThis.JSON.stringify\n\nexport const BOOL = 16,\n  BYTEA = 17,\n  CHAR = 18,\n  INT8 = 20,\n  INT2 = 21,\n  INT4 = 23,\n  REGPROC = 24,\n  TEXT = 25,\n  OID = 26,\n  TID = 27,\n  XID = 28,\n  CID = 29,\n  JSON = 114,\n  XML = 142,\n  PG_NODE_TREE = 194,\n  SMGR = 210,\n  PATH = 602,\n  POLYGON = 604,\n  CIDR = 650,\n  FLOAT4 = 700,\n  FLOAT8 = 701,\n  ABSTIME = 702,\n  RELTIME = 703,\n  TINTERVAL = 704,\n  CIRCLE = 718,\n  MACADDR8 = 774,\n  MONEY = 790,\n  MACADDR = 829,\n  INET = 869,\n  ACLITEM = 1033,\n  BPCHAR = 1042,\n  VARCHAR = 1043,\n  DATE = 1082,\n  TIME = 1083,\n  TIMESTAMP = 1114,\n  TIMESTAMPTZ = 1184,\n  INTERVAL = 1186,\n  TIMETZ = 1266,\n  BIT = 1560,\n  VARBIT = 1562,\n  NUMERIC = 1700,\n  REFCURSOR = 1790,\n  REGPROCEDURE = 2202,\n  REGOPER = 2203,\n  REGOPERATOR = 2204,\n  REGCLASS = 2205,\n  REGTYPE = 2206,\n  UUID = 2950,\n  TXID_SNAPSHOT = 2970,\n  PG_LSN = 3220,\n  PG_NDISTINCT = 3361,\n  PG_DEPENDENCIES = 3402,\n  TSVECTOR = 3614,\n  TSQUERY = 3615,\n  GTSVECTOR = 3642,\n  REGCONFIG = 3734,\n  REGDICTIONARY = 3769,\n  JSONB = 3802,\n  REGNAMESPACE = 4089,\n  REGROLE = 4096\n\nexport const types = {\n  string: {\n    to: TEXT,\n    from: [TEXT, VARCHAR, BPCHAR],\n    serialize: (x: string | number) => {\n      if (typeof x === 'string') {\n        return x\n      } else if (typeof x === 'number') {\n        return x.toString()\n      } else {\n        throw new Error('Invalid input for string type')\n      }\n    },\n    parse: (x: string) => x,\n  },\n  number: {\n    to: 0,\n    from: [INT2, INT4, OID, FLOAT4, FLOAT8],\n    serialize: (x: number) => x.toString(),\n    parse: (x: string) => +x,\n  },\n  bigint: {\n    to: INT8,\n    from: [INT8],\n    serialize: (x: bigint) => x.toString(),\n    parse: (x: string) => {\n      const n = BigInt(x)\n      if (n < Number.MIN_SAFE_INTEGER || n > Number.MAX_SAFE_INTEGER) {\n        return n // return BigInt\n      } else {\n        return Number(n) // in range of standard JS numbers so return number\n      }\n    },\n  },\n  json: {\n    to: JSON,\n    from: [JSON, JSONB],\n    serialize: (x: any) => {\n      if (typeof x === 'string') {\n        return x\n      } else {\n        return JSON_stringify(x)\n      }\n    },\n    parse: (x: string) => JSON_parse(x),\n  },\n  boolean: {\n    to: BOOL,\n    from: [BOOL],\n    serialize: (x: boolean) => {\n      if (typeof x !== 'boolean') {\n        throw new Error('Invalid input for boolean type')\n      }\n      return x ? 't' : 'f'\n    },\n    parse: (x: string) => x === 't',\n  },\n  date: {\n    to: TIMESTAMPTZ,\n    from: [DATE, TIMESTAMP, TIMESTAMPTZ],\n    serialize: (x: Date | string | number) => {\n      if (typeof x === 'string') {\n        return x\n      } else if (typeof x === 'number') {\n        return new Date(x).toISOString()\n      } else if (x instanceof Date) {\n        return x.toISOString()\n      } else {\n        throw new Error('Invalid input for date type')\n      }\n    },\n    parse: (x: string | number) => new Date(x),\n  },\n  bytea: {\n    to: BYTEA,\n    from: [BYTEA],\n    serialize: (x: Uint8Array) => {\n      if (!(x instanceof Uint8Array)) {\n        throw new Error('Invalid input for bytea type')\n      }\n      return (\n        '\\\\x' +\n        Array.from(x)\n          .map((byte) => byte.toString(16).padStart(2, '0'))\n          .join('')\n      )\n    },\n    parse: (x: string): Uint8Array => {\n      const hexString = x.slice(2)\n      return Uint8Array.from({ length: hexString.length / 2 }, (_, idx) =>\n        parseInt(hexString.substring(idx * 2, (idx + 1) * 2), 16),\n      )\n    },\n  },\n} satisfies TypeHandlers\n\nexport type Parser = (x: string, typeId?: number) => any\nexport type Serializer = (x: any) => string\n\nexport type TypeHandler = {\n  to: number\n  from: number | number[]\n  serialize: Serializer\n  parse: Parser\n}\n\nexport type TypeHandlers = {\n  [key: string]: TypeHandler\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport const parsers = defaultHandlers.parsers\nexport const serializers = defaultHandlers.serializers\n\nexport function parseType(\n  x: string | null,\n  type: number,\n  parsers?: ParserOptions,\n): any {\n  if (x === null) {\n    return null\n  }\n  const handler = parsers?.[type] ?? defaultHandlers.parsers[type]\n  if (handler) {\n    return handler(x, type)\n  } else {\n    return x\n  }\n}\n\nfunction typeHandlers(types: TypeHandlers) {\n  return Object.keys(types).reduce(\n    ({ parsers, serializers }, k) => {\n      const { to, from, serialize, parse } = types[k]\n      serializers[to] = serialize\n      serializers[k] = serialize\n      parsers[k] = parse\n      if (Array.isArray(from)) {\n        from.forEach((f) => {\n          parsers[f] = parse\n          serializers[f] = serialize\n        })\n      } else {\n        parsers[from] = parse\n        serializers[from] = serialize\n      }\n      return { parsers, serializers }\n    },\n    {\n      parsers: {} as {\n        [key: number | string]: (x: string, typeId?: number) => any\n      },\n      serializers: {} as {\n        [key: number | string]: Serializer\n      },\n    },\n  )\n}\n\nconst escapeBackslash = /\\\\/g\nconst escapeQuote = /\"/g\n\nfunction arrayEscape(x: string) {\n  return x.replace(escapeBackslash, '\\\\\\\\').replace(escapeQuote, '\\\\\"')\n}\n\nexport function arraySerializer(\n  xs: any,\n  serializer: Serializer | undefined,\n  typarray: number,\n): string {\n  if (Array.isArray(xs) === false) return xs\n\n  if (!xs.length) return '{}'\n\n  const first = xs[0]\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n\n  if (Array.isArray(first)) {\n    return `{${xs.map((x) => arraySerializer(x, serializer, typarray)).join(delimiter)}}`\n  } else {\n    return `{${xs\n      .map((x) => {\n        if (x === undefined) {\n          x = null\n          // TODO: Add an option to specify how to handle undefined values\n        }\n        return x === null\n          ? 'null'\n          : '\"' + arrayEscape(serializer ? serializer(x) : x.toString()) + '\"'\n      })\n      .join(delimiter)}}`\n  }\n}\n\nconst arrayParserState = {\n  i: 0,\n  char: null as string | null,\n  str: '',\n  quoted: false,\n  last: 0,\n  p: null as string | null,\n}\n\nexport function arrayParser(x: string, parser: Parser, typarray: number) {\n  arrayParserState.i = arrayParserState.last = 0\n  return arrayParserLoop(arrayParserState, x, parser, typarray)[0]\n}\n\nfunction arrayParserLoop(\n  s: typeof arrayParserState,\n  x: string,\n  parser: Parser | undefined,\n  typarray: number,\n): any[] {\n  const xs = []\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n  for (; s.i < x.length; s.i++) {\n    s.char = x[s.i]\n    if (s.quoted) {\n      if (s.char === '\\\\') {\n        s.str += x[++s.i]\n      } else if (s.char === '\"') {\n        xs.push(parser ? parser(s.str) : s.str)\n        s.str = ''\n        s.quoted = x[s.i + 1] === '\"'\n        s.last = s.i + 2\n      } else {\n        s.str += s.char\n      }\n    } else if (s.char === '\"') {\n      s.quoted = true\n    } else if (s.char === '{') {\n      s.last = ++s.i\n      xs.push(arrayParserLoop(s, x, parser, typarray))\n    } else if (s.char === '}') {\n      s.quoted = false\n      s.last < s.i &&\n        xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n      break\n    } else if (s.char === delimiter && s.p !== '}' && s.p !== '\"') {\n      xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n    }\n    s.p = s.char\n  }\n  s.last < s.i &&\n    xs.push(\n      parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1),\n    )\n  return xs\n}\n","import {\n  BackendMessage,\n  RowDescriptionMessage,\n  DataRowMessage,\n  CommandCompleteMessage,\n  ParameterDescriptionMessage,\n} from '@electric-sql/pg-protocol/messages'\nimport type { Results, QueryOptions } from './interface.js'\nimport { parseType, type Parser } from './types.js'\n\n/**\n * This function is used to parse the results of either a simple or extended query.\n * https://www.postgresql.org/docs/current/protocol-flow.html#PROTOCOL-FLOW-SIMPLE-QUERY\n */\nexport function parseResults(\n  messages: Array<BackendMessage>,\n  defaultParsers: Record<number | string, Parser>,\n  options?: QueryOptions,\n  blob?: Blob,\n): Array<Results> {\n  const resultSets: Results[] = []\n  let currentResultSet: Results = { rows: [], fields: [] }\n  let affectedRows = 0\n  const parsers = { ...defaultParsers, ...options?.parsers }\n\n  const filteredMessages = messages.filter(\n    (msg) =>\n      msg.name === 'rowDescription' ||\n      msg.name === 'dataRow' ||\n      msg.name === 'commandComplete',\n  )\n\n  filteredMessages.forEach((message, index) => {\n    if (message.name === 'rowDescription') {\n      const msg = message as RowDescriptionMessage\n      currentResultSet.fields = msg.fields.map((field) => ({\n        name: field.name,\n        dataTypeID: field.dataTypeID,\n      }))\n    } else if (message.name === 'dataRow' && currentResultSet) {\n      const msg = message as DataRowMessage\n      if (options?.rowMode === 'array') {\n        currentResultSet.rows.push(\n          msg.fields.map((field, i) =>\n            parseType(field, currentResultSet!.fields[i].dataTypeID, parsers),\n          ),\n        )\n      } else {\n        // rowMode === \"object\"\n        currentResultSet.rows.push(\n          Object.fromEntries(\n            msg.fields.map((field, i) => [\n              currentResultSet!.fields[i].name,\n              parseType(field, currentResultSet!.fields[i].dataTypeID, parsers),\n            ]),\n          ),\n        )\n      }\n    } else if (message.name === 'commandComplete') {\n      const msg = message as CommandCompleteMessage\n      affectedRows += retrieveRowCount(msg)\n\n      if (index === filteredMessages.length - 1)\n        resultSets.push({\n          ...currentResultSet,\n          affectedRows,\n          ...(blob ? { blob } : {}),\n        })\n      else resultSets.push(currentResultSet)\n\n      currentResultSet = { rows: [], fields: [] }\n    }\n  })\n\n  if (resultSets.length === 0) {\n    resultSets.push({\n      rows: [],\n      fields: [],\n    })\n  }\n\n  return resultSets\n}\n\nfunction retrieveRowCount(msg: CommandCompleteMessage): number {\n  const parts = msg.text.split(' ')\n  switch (parts[0]) {\n    case 'INSERT':\n      return parseInt(parts[2], 10)\n    case 'UPDATE':\n    case 'DELETE':\n      return parseInt(parts[1], 10)\n    default:\n      return 0\n  }\n}\n\n/** Get the dataTypeIDs from a list of messages, if it's available. */\nexport function parseDescribeStatementResults(\n  messages: Array<BackendMessage>,\n): number[] {\n  const message = messages.find(\n    (msg): msg is ParameterDescriptionMessage =>\n      msg.name === 'parameterDescription',\n  )\n\n  if (message) {\n    return message.dataTypeIDs\n  }\n\n  return []\n}\n","/**\n * Calculates the byte length of a UTF-8 encoded string\n * Adapted from https://stackoverflow.com/a/23329386\n * @param str - UTF-8 encoded string\n * @returns byte length of string\n */\nfunction byteLengthUtf8(str: string): number {\n  let byteLength = str.length\n  for (let i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i)\n    if (code > 0x7f && code <= 0x7ff) byteLength++\n    else if (code > 0x7ff && code <= 0xffff) byteLength += 2\n    if (code >= 0xdc00 && code <= 0xdfff) i-- // trail surrogate\n  }\n  return byteLength\n}\n\nexport { byteLengthUtf8 }\n","import { byteLengthUtf8 } from './string-utils'\n\nexport class Writer {\n  #bufferView: DataView\n  #offset: number = 5\n\n  readonly #littleEndian = false as const\n  readonly #encoder = new TextEncoder()\n  readonly #headerPosition: number = 0\n  constructor(private size = 256) {\n    this.#bufferView = this.#allocateBuffer(size)\n  }\n\n  #allocateBuffer(size: number): DataView {\n    return new DataView(new ArrayBuffer(size))\n  }\n\n  #ensure(size: number): void {\n    const remaining = this.#bufferView.byteLength - this.#offset\n    if (remaining < size) {\n      const oldBuffer = this.#bufferView.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      const newSize = oldBuffer.byteLength + (oldBuffer.byteLength >> 1) + size\n      this.#bufferView = this.#allocateBuffer(newSize)\n      new Uint8Array(this.#bufferView.buffer).set(new Uint8Array(oldBuffer))\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.#ensure(4)\n    this.#bufferView.setInt32(this.#offset, num, this.#littleEndian)\n    this.#offset += 4\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.#ensure(2)\n    this.#bufferView.setInt16(this.#offset, num, this.#littleEndian)\n    this.#offset += 2\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (string) {\n      // TODO(msfstef): might be faster to extract `addString` code and\n      // ensure length + 1 once rather than length and then +1?\n      this.addString(string)\n    }\n\n    // set null terminator\n    this.#ensure(1)\n    this.#bufferView.setUint8(this.#offset, 0)\n    this.#offset++\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    const length = byteLengthUtf8(string)\n    this.#ensure(length)\n    this.#encoder.encodeInto(\n      string,\n      new Uint8Array(this.#bufferView.buffer, this.#offset),\n    )\n    this.#offset += length\n    return this\n  }\n\n  public add(otherBuffer: ArrayBuffer): Writer {\n    this.#ensure(otherBuffer.byteLength)\n    new Uint8Array(this.#bufferView.buffer).set(\n      new Uint8Array(otherBuffer),\n      this.#offset,\n    )\n\n    this.#offset += otherBuffer.byteLength\n    return this\n  }\n\n  #join(code?: number): ArrayBuffer {\n    if (code) {\n      this.#bufferView.setUint8(this.#headerPosition, code)\n      // length is everything in this packet minus the code\n      const length = this.#offset - (this.#headerPosition + 1)\n      this.#bufferView.setInt32(\n        this.#headerPosition + 1,\n        length,\n        this.#littleEndian,\n      )\n    }\n    return this.#bufferView.buffer.slice(code ? 0 : 5, this.#offset)\n  }\n\n  public flush(code?: number): Uint8Array {\n    const result = this.#join(code)\n    this.#offset = 5\n    this.#bufferView = this.#allocateBuffer(this.size)\n    return new Uint8Array(result)\n  }\n}\n","import { Writer } from './buffer-writer'\nimport { byteLengthUtf8 } from './string-utils'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\ntype LegalValue = string | ArrayBuffer | ArrayBufferView | null\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Uint8Array => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  const bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  const length = bodyBuffer.byteLength + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Uint8Array => {\n  const bufferView = new DataView(new ArrayBuffer(8))\n  bufferView.setInt32(0, 8, false)\n  bufferView.setInt32(4, 80877103, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\nconst password = (password: string): Uint8Array => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = (\n  mechanism: string,\n  initialResponse: string,\n): Uint8Array => {\n  // 0x70 = 'p'\n  writer\n    .addCString(mechanism)\n    .addInt32(byteLengthUtf8(initialResponse))\n    .addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = (additionalData: string): Uint8Array => {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Uint8Array => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyValueArray: LegalValue[] = []\n\nconst parse = (query: ParseOpts): Uint8Array => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name ?? ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error(\n      'Warning! Postgres only supports 63 characters for query names.',\n    )\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error(\n      'This can cause conflicts and silent errors executing queries',\n    )\n    /* eslint-enable no-console */\n  }\n\n  const buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(query.types?.length ?? 0)\n\n  query.types?.forEach((type) => buffer.addInt32(type))\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: unknown, index: number) => LegalValue\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: LegalValue[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = (values: LegalValue[], valueMapper?: ValueMapper): void => {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal === null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (\n      mappedVal instanceof ArrayBuffer ||\n      ArrayBuffer.isView(mappedVal)\n    ) {\n      const buffer = ArrayBuffer.isView(mappedVal)\n        ? mappedVal.buffer.slice(\n            mappedVal.byteOffset,\n            mappedVal.byteOffset + mappedVal.byteLength,\n          )\n        : mappedVal\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(buffer.byteLength)\n      paramWriter.add(buffer)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(byteLengthUtf8(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Uint8Array => {\n  // normalize config\n  const portal = config.portal ?? ''\n  const statement = config.statement ?? ''\n  const binary = config.binary ?? false\n  const values = config.values ?? emptyValueArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = new Uint8Array([\n  code.execute,\n  0x00,\n  0x00,\n  0x00,\n  0x09,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n])\n\nconst execute = (config?: ExecOpts): Uint8Array => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal ?? ''\n  const rows = config.rows ?? 0\n\n  const portalLength = byteLengthUtf8(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const bufferView = new DataView(new ArrayBuffer(1 + len))\n  bufferView.setUint8(0, code.execute)\n  bufferView.setInt32(1, len, false)\n  new TextEncoder().encodeInto(portal, new Uint8Array(bufferView.buffer, 5))\n  bufferView.setUint8(portalLength + 5, 0) // null terminate portal cString\n  bufferView.setUint32(bufferView.byteLength - 4, rows, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\nconst cancel = (processID: number, secretKey: number): Uint8Array => {\n  const bufferView = new DataView(new ArrayBuffer(16))\n  bufferView.setInt32(0, 16, false)\n  bufferView.setInt16(4, 1234, false)\n  bufferView.setInt16(6, 5678, false)\n  bufferView.setInt32(8, processID, false)\n  bufferView.setInt32(12, secretKey, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Uint8Array => {\n  const writer = new Writer()\n  writer.addCString(string)\n  return writer.flush(code)\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Uint8Array => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name ?? ''}`)\n    : msg.type === 'P'\n      ? emptyDescribePortal\n      : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Uint8Array => {\n  const text = `${msg.type}${msg.name ?? ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: ArrayBuffer): Uint8Array => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Uint8Array => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Uint8Array =>\n  new Uint8Array([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n","const emptyBuffer = new ArrayBuffer(0)\n\nexport class BufferReader {\n  #bufferView: DataView = new DataView(emptyBuffer)\n  #offset: number\n\n  // TODO(bmc): support non-utf8 encoding?\n  readonly #encoding: string = 'utf-8' as const\n  readonly #decoder = new TextDecoder(this.#encoding)\n  readonly #littleEndian: boolean = false as const\n\n  constructor(offset: number = 0) {\n    this.#offset = offset\n  }\n\n  public setBuffer(offset: number, buffer: ArrayBuffer): void {\n    this.#offset = offset\n    this.#bufferView = new DataView(buffer)\n  }\n\n  public int16(): number {\n    // const result = this.buffer.readInt16BE(this.#offset)\n    const result = this.#bufferView.getInt16(this.#offset, this.#littleEndian)\n    this.#offset += 2\n    return result\n  }\n\n  public byte(): number {\n    // const result = this.bufferView[this.#offset]\n    const result = this.#bufferView.getUint8(this.#offset)\n    this.#offset++\n    return result\n  }\n\n  public int32(): number {\n    // const result = this.buffer.readInt32BE(this.#offset)\n    const result = this.#bufferView.getInt32(this.#offset, this.#littleEndian)\n    this.#offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    // const result = this.#bufferView.toString(\n    //   this.#encoding,\n    //   this.#offset,\n    //   this.#offset + length,\n    // )\n    // this.#offset += length\n\n    const result = this.#decoder.decode(this.bytes(length))\n    return result\n  }\n\n  public cstring(): string {\n    // const start = this.#offset\n    // let end = start\n    // while (this.#bufferView[end++] !== 0) {}\n\n    const start = this.#offset\n    let end = start\n    while (this.#bufferView.getUint8(end++) !== 0) {\n      // no-op - increment until terminator reached\n    }\n    const result = this.string(end - start - 1)\n    this.#offset = end\n    return result\n  }\n\n  public bytes(length: number): Uint8Array {\n    // const result = this.buffer.slice(this.#offset, this.#offset + length)\n    const result = this.#bufferView.buffer.slice(\n      this.#offset,\n      this.#offset + length,\n    )\n    this.#offset += length\n    return new Uint8Array(result)\n  }\n}\n","import {\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  NoticeMessage,\n  AuthenticationMessage,\n  AuthenticationOk,\n  AuthenticationCleartextPassword,\n  AuthenticationMD5Password,\n  AuthenticationSASL,\n  AuthenticationSASLContinue,\n  AuthenticationSASLFinal,\n} from './messages'\nimport { BufferParameter, Modes } from './types'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1 as const\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4 as const\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: ArrayBuffer\n}\n\nconst emptyBuffer = new ArrayBuffer(0)\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  #bufferView: DataView = new DataView(emptyBuffer)\n  #bufferRemainingLength: number = 0\n  #bufferOffset: number = 0\n  #reader = new BufferReader()\n\n  public parse(buffer: BufferParameter, callback: MessageCallback) {\n    this.#mergeBuffer(\n      ArrayBuffer.isView(buffer)\n        ? buffer.buffer.slice(\n            buffer.byteOffset,\n            buffer.byteOffset + buffer.byteLength,\n          )\n        : buffer,\n    )\n    const bufferFullLength = this.#bufferOffset + this.#bufferRemainingLength\n    let offset = this.#bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.#bufferView.getUint8(offset)\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.#bufferView.getUint32(offset + CODE_LENGTH, false)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.#handlePacket(\n          offset + HEADER_LENGTH,\n          code,\n          length,\n          this.#bufferView.buffer,\n        )\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.#bufferView = new DataView(emptyBuffer)\n      this.#bufferRemainingLength = 0\n      this.#bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.#bufferRemainingLength = bufferFullLength - offset\n      this.#bufferOffset = offset\n    }\n  }\n\n  #mergeBuffer(buffer: ArrayBuffer): void {\n    if (this.#bufferRemainingLength > 0) {\n      const newLength = this.#bufferRemainingLength + buffer.byteLength\n      const newFullLength = newLength + this.#bufferOffset\n      if (newFullLength > this.#bufferView.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: ArrayBuffer\n        if (\n          newLength <= this.#bufferView.byteLength &&\n          this.#bufferOffset >= this.#bufferRemainingLength\n        ) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.#bufferView.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.#bufferView.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = new ArrayBuffer(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        new Uint8Array(newBuffer).set(\n          new Uint8Array(\n            this.#bufferView.buffer,\n            this.#bufferOffset,\n            this.#bufferRemainingLength,\n          ),\n        )\n        this.#bufferView = new DataView(newBuffer)\n        this.#bufferOffset = 0\n      }\n\n      // Concat the new buffer with the remaining one\n      new Uint8Array(this.#bufferView.buffer).set(\n        new Uint8Array(buffer),\n        this.#bufferOffset + this.#bufferRemainingLength,\n      )\n      this.#bufferRemainingLength = newLength\n    } else {\n      this.#bufferView = new DataView(buffer)\n      this.#bufferOffset = 0\n      this.#bufferRemainingLength = buffer.byteLength\n    }\n  }\n\n  #handlePacket(\n    offset: number,\n    code: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.#parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.#parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.#parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.#parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.#parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.#parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.#parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.#parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.#parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.#parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.#parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.#parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.#parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.#parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError(\n          'received invalid response: ' + code.toString(16),\n          length,\n          'error',\n        )\n    }\n  }\n\n  #parseReadyForQueryMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const status = this.#reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  #parseCommandCompleteMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const text = this.#reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  #parseCopyData(offset: number, length: number, bytes: ArrayBuffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, new Uint8Array(chunk))\n  }\n\n  #parseCopyInMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    return this.#parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  #parseCopyOutMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    return this.#parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  #parseCopyMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n    messageName: MessageName,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const isBinary = this.#reader.byte() !== 0\n    const columnCount = this.#reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.#reader.int16()\n    }\n    return message\n  }\n\n  #parseNotificationMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const processId = this.#reader.int32()\n    const channel = this.#reader.cstring()\n    const payload = this.#reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  #parseRowDescriptionMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const fieldCount = this.#reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.#parseField()\n    }\n    return message\n  }\n\n  #parseField(): Field {\n    const name = this.#reader.cstring()\n    const tableID = this.#reader.int32()\n    const columnID = this.#reader.int16()\n    const dataTypeID = this.#reader.int32()\n    const dataTypeSize = this.#reader.int16()\n    const dataTypeModifier = this.#reader.int32()\n    const mode = this.#reader.int16() === 0 ? Modes.text : Modes.binary\n    return new Field(\n      name,\n      tableID,\n      columnID,\n      dataTypeID,\n      dataTypeSize,\n      dataTypeModifier,\n      mode,\n    )\n  }\n\n  #parseParameterDescriptionMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const parameterCount = this.#reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.#reader.int32()\n    }\n    return message\n  }\n\n  #parseDataRowMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    this.#reader.setBuffer(offset, bytes)\n    const fieldCount = this.#reader.int16()\n    const fields: (string | null)[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.#reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.#reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  #parseParameterStatusMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const name = this.#reader.cstring()\n    const value = this.#reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  #parseBackendKeyData(offset: number, length: number, bytes: ArrayBuffer) {\n    this.#reader.setBuffer(offset, bytes)\n    const processID = this.#reader.int32()\n    const secretKey = this.#reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  #parseAuthenticationResponse(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ): AuthenticationMessage {\n    this.#reader.setBuffer(offset, bytes)\n    const code = this.#reader.int32()\n    switch (code) {\n      case 0:\n        return new AuthenticationOk(length)\n      case 3:\n        return new AuthenticationCleartextPassword(length)\n\n      case 5:\n        return new AuthenticationMD5Password(length, this.#reader.bytes(4))\n\n      case 10: {\n        const mechanisms: string[] = []\n        while (true) {\n          const mechanism = this.#reader.cstring()\n          if (mechanism.length === 0) {\n            return new AuthenticationSASL(length, mechanisms)\n          }\n          mechanisms.push(mechanism)\n        }\n      }\n      case 11:\n        return new AuthenticationSASLContinue(\n          length,\n          this.#reader.string(length - 8),\n        )\n\n      case 12:\n        return new AuthenticationSASLFinal(\n          length,\n          this.#reader.string(length - 8),\n        )\n\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n  }\n\n  #parseErrorMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n    name: MessageName,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.#reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.#reader.cstring()\n      fieldType = this.#reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice'\n        ? new NoticeMessage(length, messageValue)\n        : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n","import { query as queryTemplate } from './templating.js'\nimport { parseDescribeStatementResults, parseResults } from './parse.js'\nimport {\n  type Serializer,\n  type Parser,\n  serializers,\n  parsers,\n  arraySerializer,\n  arrayParser,\n} from './types.js'\nimport type {\n  DebugLevel,\n  PGliteInterface,\n  Results,\n  Transaction,\n  QueryOptions,\n  ExecProtocolOptions,\n  ExecProtocolResult,\n} from './interface.js'\n\nimport { serialize as serializeProtocol } from '@electric-sql/pg-protocol'\n\nexport abstract class BasePGlite\n  implements Pick<PGliteInterface, 'query' | 'sql' | 'exec' | 'transaction'>\n{\n  serializers: Record<number | string, Serializer> = { ...serializers }\n  parsers: Record<number | string, Parser> = { ...parsers }\n  #arrayTypesInitialized = false\n\n  // # Abstract properties:\n  abstract debug: DebugLevel\n\n  // # Private properties:\n  #inTransaction = false\n\n  // # Abstract methods:\n\n  /**\n   * Execute a postgres wire protocol message\n   * @param message The postgres wire protocol message to execute\n   * @returns The result of the query\n   */\n  abstract execProtocol(\n    message: Uint8Array,\n    { syncToFs, onNotice }: ExecProtocolOptions,\n  ): Promise<ExecProtocolResult>\n\n  /**\n   * Execute a postgres wire protocol message directly without wrapping the response.\n   * Only use if `execProtocol()` doesn't suite your needs.\n   *\n   * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,\n   * transactions, and notification listeners. Only use if you need to bypass these wrappers and\n   * don't intend to use the above features.\n   *\n   * @param message The postgres wire protocol message to execute\n   * @returns The direct message data response produced by Postgres\n   */\n  abstract execProtocolRaw(\n    message: Uint8Array,\n    { syncToFs }: ExecProtocolOptions,\n  ): Promise<Uint8Array>\n\n  /**\n   * Sync the database to the filesystem\n   * @returns Promise that resolves when the database is synced to the filesystem\n   */\n  abstract syncToFs(): Promise<void>\n\n  /**\n   * Handle a file attached to the current query\n   * @param file The file to handle\n   */\n  abstract _handleBlob(blob?: File | Blob): Promise<void>\n\n  /**\n   * Get the written file\n   */\n  abstract _getWrittenBlob(): Promise<File | Blob | undefined>\n\n  /**\n   * Cleanup the current file\n   */\n  abstract _cleanupBlob(): Promise<void>\n\n  abstract _checkReady(): Promise<void>\n  abstract _runExclusiveQuery<T>(fn: () => Promise<T>): Promise<T>\n  abstract _runExclusiveTransaction<T>(fn: () => Promise<T>): Promise<T>\n\n  // # Concrete implementations:\n\n  /**\n   * Initialize the array types\n   * The oid if the type of an element and the typarray is the oid of the type of the\n   * array.\n   * We extract these from the databaes then create the serializers/parsers for\n   * each type.\n   * This should be called at the end of #init() in the implementing class.\n   */\n  async _initArrayTypes() {\n    if (this.#arrayTypesInitialized) return\n    this.#arrayTypesInitialized = true\n\n    const types = await this.query<{ oid: number; typarray: number }>(`\n      SELECT b.oid, b.typarray\n      FROM pg_catalog.pg_type a\n      LEFT JOIN pg_catalog.pg_type b ON b.oid = a.typelem\n      WHERE a.typcategory = 'A'\n      GROUP BY b.oid, b.typarray\n      ORDER BY b.oid\n    `)\n\n    for (const type of types.rows) {\n      this.serializers[type.typarray] = (x) =>\n        arraySerializer(x, this.serializers[type.oid], type.typarray)\n      this.parsers[type.typarray] = (x) =>\n        arrayParser(x, this.parsers[type.oid], type.typarray)\n    }\n  }\n\n  async #execProtocolNoSync(\n    message: Uint8Array,\n    options: ExecProtocolOptions = {},\n  ): Promise<ExecProtocolResult> {\n    return await this.execProtocol(message, { ...options, syncToFs: false })\n  }\n\n  /**\n   * Execute a single SQL statement\n   * This uses the \"Extended Query\" postgres wire protocol message.\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>> {\n    await this._checkReady()\n    // We wrap the public query method in the transaction mutex to ensure that\n    // only one query can be executed at a time and not concurrently with a\n    // transaction.\n    return await this._runExclusiveTransaction(async () => {\n      return await this.#runQuery<T>(query, params, options)\n    })\n  }\n\n  /**\n   * Execute a single SQL statement like with {@link PGlite.query}, but with a\n   * templated statement where template values will be treated as parameters.\n   *\n   * You can use helpers from `/template` to further format the query with\n   * identifiers, raw SQL, and nested statements.\n   *\n   * This uses the \"Extended Query\" postgres wire protocol message.\n   *\n   * @param query The query to execute with parameters as template values\n   * @returns The result of the query\n   *\n   * @example\n   * ```ts\n   * const results = await db.sql`SELECT * FROM ${identifier`foo`} WHERE id = ${id}`\n   * ```\n   */\n  async sql<T>(\n    sqlStrings: TemplateStringsArray,\n    ...params: any[]\n  ): Promise<Results<T>> {\n    const { query, params: actualParams } = queryTemplate(sqlStrings, ...params)\n    return await this.query(query, actualParams)\n  }\n\n  /**\n   * Execute a SQL query, this can have multiple statements.\n   * This uses the \"Simple Query\" postgres wire protocol message.\n   * @param query The query to execute\n   * @returns The result of the query\n   */\n  async exec(query: string, options?: QueryOptions): Promise<Array<Results>> {\n    await this._checkReady()\n    // We wrap the public exec method in the transaction mutex to ensure that\n    // only one query can be executed at a time and not concurrently with a\n    // transaction.\n    return await this._runExclusiveTransaction(async () => {\n      return await this.#runExec(query, options)\n    })\n  }\n\n  /**\n   * Internal method to execute a query\n   * Not protected by the transaction mutex, so it can be used inside a transaction\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async #runQuery<T>(\n    query: string,\n    params: any[] = [],\n    options?: QueryOptions,\n  ): Promise<Results<T>> {\n    return await this._runExclusiveQuery(async () => {\n      // We need to parse, bind and execute a query with parameters\n      this.#log('runQuery', query, params, options)\n      await this._handleBlob(options?.blob)\n\n      let results\n\n      try {\n        const { messages: parseResults } = await this.#execProtocolNoSync(\n          serializeProtocol.parse({ text: query, types: options?.paramTypes }),\n          options,\n        )\n\n        const dataTypeIDs = parseDescribeStatementResults(\n          (\n            await this.#execProtocolNoSync(\n              serializeProtocol.describe({ type: 'S' }),\n              options,\n            )\n          ).messages,\n        )\n\n        const values = params.map((param, i) => {\n          const oid = dataTypeIDs[i]\n          if (param === null || param === undefined) {\n            return null\n          }\n          const serialize = this.serializers[oid]\n          if (serialize) {\n            return serialize(param)\n          } else {\n            return param.toString()\n          }\n        })\n\n        results = [\n          ...parseResults,\n          ...(\n            await this.#execProtocolNoSync(\n              serializeProtocol.bind({\n                values,\n              }),\n              options,\n            )\n          ).messages,\n          ...(\n            await this.#execProtocolNoSync(\n              serializeProtocol.describe({ type: 'P' }),\n              options,\n            )\n          ).messages,\n          ...(\n            await this.#execProtocolNoSync(\n              serializeProtocol.execute({}),\n              options,\n            )\n          ).messages,\n        ]\n      } finally {\n        await this.#execProtocolNoSync(serializeProtocol.sync(), options)\n      }\n\n      await this._cleanupBlob()\n      if (!this.#inTransaction) {\n        await this.syncToFs()\n      }\n      const blob = await this._getWrittenBlob()\n      return parseResults(results, this.parsers, options, blob)[0] as Results<T>\n    })\n  }\n\n  /**\n   * Internal method to execute a query\n   * Not protected by the transaction mutex, so it can be used inside a transaction\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async #runExec(\n    query: string,\n    options?: QueryOptions,\n  ): Promise<Array<Results>> {\n    return await this._runExclusiveQuery(async () => {\n      // No params so we can just send the query\n      this.#log('runExec', query, options)\n      await this._handleBlob(options?.blob)\n      let results\n      try {\n        results = (\n          await this.#execProtocolNoSync(\n            serializeProtocol.query(query),\n            options,\n          )\n        ).messages\n      } finally {\n        await this.#execProtocolNoSync(serializeProtocol.sync(), options)\n      }\n      this._cleanupBlob()\n      if (!this.#inTransaction) {\n        await this.syncToFs()\n      }\n      const blob = await this._getWrittenBlob()\n      return parseResults(\n        results,\n        this.parsers,\n        options,\n        blob,\n      ) as Array<Results>\n    })\n  }\n\n  /**\n   * Execute a transaction\n   * @param callback A callback function that takes a transaction object\n   * @returns The result of the transaction\n   */\n  async transaction<T>(\n    callback: (tx: Transaction) => Promise<T>,\n  ): Promise<T | undefined> {\n    await this._checkReady()\n    return await this._runExclusiveTransaction(async () => {\n      await this.#runExec('BEGIN')\n      this.#inTransaction = true\n\n      // Once a transaction is closed, we throw an error if it's used again\n      let closed = false\n      const checkClosed = () => {\n        if (closed) {\n          throw new Error('Transaction is closed')\n        }\n      }\n\n      const tx: Transaction = {\n        query: async <T>(\n          query: string,\n          params?: any[],\n          options?: QueryOptions,\n        ): Promise<Results<T>> => {\n          checkClosed()\n          return await this.#runQuery(query, params, options)\n        },\n        sql: async <T>(\n          sqlStrings: TemplateStringsArray,\n          ...params: any[]\n        ): Promise<Results<T>> => {\n          const { query, params: actualParams } = queryTemplate(\n            sqlStrings,\n            ...params,\n          )\n          return await this.#runQuery(query, actualParams)\n        },\n        exec: async (\n          query: string,\n          options?: QueryOptions,\n        ): Promise<Array<Results>> => {\n          checkClosed()\n          return await this.#runExec(query, options)\n        },\n        rollback: async () => {\n          checkClosed()\n          // Rollback and set the closed flag to prevent further use of this\n          // transaction\n          await this.#runExec('ROLLBACK')\n          closed = true\n        },\n        get closed() {\n          return closed\n        },\n      }\n\n      try {\n        const result = await callback(tx)\n        if (!closed) {\n          closed = true\n          await this.#runExec('COMMIT')\n        }\n        this.#inTransaction = false\n        return result\n      } catch (e) {\n        if (!closed) {\n          await this.#runExec('ROLLBACK')\n        }\n        this.#inTransaction = false\n        throw e\n      }\n    })\n  }\n\n  /**\n   * Internal log function\n   */\n  #log(...args: any[]) {\n    if (this.debug > 0) {\n      console.log(...args)\n    }\n  }\n}\n","import type { PGliteInterface, Transaction } from './interface.js'\nimport { serialize as serializeProtocol } from '@electric-sql/pg-protocol'\nimport { parseDescribeStatementResults } from './parse.js'\nimport { TEXT } from './types.js'\n\nexport const IN_NODE =\n  typeof process === 'object' &&\n  typeof process.versions === 'object' &&\n  typeof process.versions.node === 'string'\n\nlet wasmDownloadPromise: Promise<Response> | undefined\n\nexport async function startWasmDownload() {\n  if (IN_NODE || wasmDownloadPromise) {\n    return\n  }\n  const moduleUrl = new URL('../release/postgres.wasm', import.meta.url)\n  wasmDownloadPromise = fetch(moduleUrl)\n}\n\n// This is a global cache of the PGlite Wasm module to avoid having to re-download or\n// compile it on subsequent calls.\nlet cachedWasmModule: WebAssembly.Module | undefined\n\nexport async function instantiateWasm(\n  imports: WebAssembly.Imports,\n  module?: WebAssembly.Module,\n): Promise<{\n  instance: WebAssembly.Instance\n  module: WebAssembly.Module\n}> {\n  if (module || cachedWasmModule) {\n    WebAssembly.instantiate(module || cachedWasmModule!, imports)\n    return {\n      instance: await WebAssembly.instantiate(\n        module || cachedWasmModule!,\n        imports,\n      ),\n      module: module || cachedWasmModule!,\n    }\n  }\n  const moduleUrl = new URL('../release/postgres.wasm', import.meta.url)\n  if (IN_NODE) {\n    const fs = await import('fs/promises')\n    const buffer = await fs.readFile(moduleUrl)\n    const { module: newModule, instance } = await WebAssembly.instantiate(\n      buffer,\n      imports,\n    )\n    cachedWasmModule = newModule\n    return {\n      instance,\n      module: newModule,\n    }\n  } else {\n    if (!wasmDownloadPromise) {\n      wasmDownloadPromise = fetch(moduleUrl)\n    }\n    const response = await wasmDownloadPromise\n    const { module: newModule, instance } =\n      await WebAssembly.instantiateStreaming(response, imports)\n    cachedWasmModule = newModule\n    return {\n      instance,\n      module: newModule,\n    }\n  }\n}\n\nexport async function getFsBundle(): Promise<ArrayBuffer> {\n  const fsBundleUrl = new URL('../release/postgres.data', import.meta.url)\n  if (IN_NODE) {\n    const fs = await import('fs/promises')\n    const fileData = await fs.readFile(fsBundleUrl)\n    return fileData.buffer\n  } else {\n    const response = await fetch(fsBundleUrl)\n    return response.arrayBuffer()\n  }\n}\n\nexport const uuid = (): string => {\n  // best case, `crypto.randomUUID` is available\n  if (globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID()\n  }\n\n  const bytes = new Uint8Array(16)\n\n  if (globalThis.crypto?.getRandomValues) {\n    // `crypto.getRandomValues` is available even in non-secure contexts\n    globalThis.crypto.getRandomValues(bytes)\n  } else {\n    // fallback to Math.random, if the Crypto API is completely missing\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.floor(Math.random() * 256)\n    }\n  }\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x40 // Set the 4 most significant bits to 0100\n  bytes[8] = (bytes[8] & 0x3f) | 0x80 // Set the 2 most significant bits to 10\n\n  const hexValues: string[] = []\n  bytes.forEach((byte) => {\n    hexValues.push(byte.toString(16).padStart(2, '0'))\n  })\n\n  return (\n    hexValues.slice(0, 4).join('') +\n    '-' +\n    hexValues.slice(4, 6).join('') +\n    '-' +\n    hexValues.slice(6, 8).join('') +\n    '-' +\n    hexValues.slice(8, 10).join('') +\n    '-' +\n    hexValues.slice(10).join('')\n  )\n}\n\n/**\n * Formats a query with parameters\n * Expects that any tables/relations referenced in the query exist in the database\n * due to requiring them to be present to describe the parameters types.\n * `tx` is optional, and to be used when formatQuery is called during a transaction.\n * @param pg - The PGlite instance\n * @param query - The query to format\n * @param params - The parameters to format the query with\n * @param tx - The transaction to use, defaults to the PGlite instance\n * @returns The formatted query\n */\nexport async function formatQuery(\n  pg: PGliteInterface,\n  query: string,\n  params?: any[] | null,\n  tx?: Transaction | PGliteInterface,\n) {\n  if (!params || params.length === 0) {\n    // no params so no formatting needed\n    return query\n  }\n\n  tx = tx ?? pg\n\n  // Get the types of the parameters\n  let dataTypeIDs: number[]\n  try {\n    await pg.execProtocol(serializeProtocol.parse({ text: query }), {\n      syncToFs: false,\n    })\n\n    dataTypeIDs = parseDescribeStatementResults(\n      (\n        await pg.execProtocol(serializeProtocol.describe({ type: 'S' }), {\n          syncToFs: false,\n        })\n      ).messages,\n    )\n  } finally {\n    await pg.execProtocol(serializeProtocol.sync(), { syncToFs: false })\n  }\n\n  // replace $1, $2, etc with  %1L, %2L, etc\n  const subbedQuery = query.replace(/\\$([0-9]+)/g, (_, num) => {\n    return '%' + num + 'L'\n  })\n\n  const ret = await tx.query<{\n    query: string\n  }>(\n    `SELECT format($1, ${params.map((_, i) => `$${i + 2}`).join(', ')}) as query`,\n    [subbedQuery, ...params],\n    { paramTypes: [TEXT, ...dataTypeIDs] },\n  )\n  return ret.rows[0].query\n}\n"],"mappings":"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","names":["parsers","types","serializers","serialize","parse","parsers","password","query","writer","query","emptyBuffer","types","query","parseResults","serialize","worker","resolve","message"]}