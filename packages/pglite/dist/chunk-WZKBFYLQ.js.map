{"version":3,"sources":["../../pg-protocol/src/messages.ts","../../pg-protocol/src/index.ts","../../pg-protocol/src/serializer.ts","../../pg-protocol/src/buffer-writer.ts","../../pg-protocol/src/string-utils.ts","../../pg-protocol/src/parser.ts","../../pg-protocol/src/types.ts","../../pg-protocol/src/buffer-reader.ts","../src/types.ts","../src/parse.ts","../src/utils.ts"],"sourcesContent":["import { Mode } from './types'\n\nexport type MessageName =\n  | 'parseComplete'\n  | 'bindComplete'\n  | 'closeComplete'\n  | 'noData'\n  | 'portalSuspended'\n  | 'replicationStart'\n  | 'emptyQuery'\n  | 'copyDone'\n  | 'copyData'\n  | 'rowDescription'\n  | 'parameterDescription'\n  | 'parameterStatus'\n  | 'backendKeyData'\n  | 'notification'\n  | 'readyForQuery'\n  | 'commandComplete'\n  | 'dataRow'\n  | 'copyInResponse'\n  | 'copyOutResponse'\n  | 'authenticationOk'\n  | 'authenticationMD5Password'\n  | 'authenticationCleartextPassword'\n  | 'authenticationSASL'\n  | 'authenticationSASLContinue'\n  | 'authenticationSASLFinal'\n  | 'error'\n  | 'notice'\n\nexport type BackendMessage = {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: 'parseComplete',\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: 'bindComplete',\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: 'closeComplete',\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: 'noData',\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: 'portalSuspended',\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: 'replicationStart',\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: 'emptyQuery',\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: 'copyDone',\n  length: 4,\n}\n\nexport class AuthenticationOk implements BackendMessage {\n  public readonly name = 'authenticationOk'\n  constructor(public readonly length: number) {}\n}\n\nexport class AuthenticationCleartextPassword implements BackendMessage {\n  public readonly name = 'authenticationCleartextPassword'\n  constructor(public readonly length: number) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name = 'authenticationMD5Password'\n  constructor(\n    public readonly length: number,\n    public readonly salt: Uint8Array,\n  ) {}\n}\n\nexport class AuthenticationSASL implements BackendMessage {\n  public readonly name = 'authenticationSASL'\n  constructor(\n    public readonly length: number,\n    public readonly mechanisms: string[],\n  ) {}\n}\n\nexport class AuthenticationSASLContinue implements BackendMessage {\n  public readonly name = 'authenticationSASLContinue'\n  constructor(\n    public readonly length: number,\n    public readonly data: string,\n  ) {}\n}\n\nexport class AuthenticationSASLFinal implements BackendMessage {\n  public readonly name = 'authenticationSASLFinal'\n  constructor(\n    public readonly length: number,\n    public readonly data: string,\n  ) {}\n}\n\nexport type AuthenticationMessage =\n  | AuthenticationOk\n  | AuthenticationCleartextPassword\n  | AuthenticationMD5Password\n  | AuthenticationSASL\n  | AuthenticationSASLContinue\n  | AuthenticationSASLFinal\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(\n    message: string,\n    public readonly length: number,\n    public readonly name: MessageName,\n  ) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage implements BackendMessage {\n  public readonly name = 'copyData'\n  constructor(\n    public readonly length: number,\n    public readonly chunk: Uint8Array,\n  ) {}\n}\n\nexport class CopyResponse implements BackendMessage {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number,\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode,\n  ) {}\n}\n\nexport class RowDescriptionMessage implements BackendMessage {\n  public readonly name: MessageName = 'rowDescription'\n  public readonly fields: Field[]\n  constructor(\n    public readonly length: number,\n    public readonly fieldCount: number,\n  ) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterDescriptionMessage implements BackendMessage {\n  public readonly name: MessageName = 'parameterDescription'\n  public readonly dataTypeIDs: number[]\n  constructor(\n    public readonly length: number,\n    public readonly parameterCount: number,\n  ) {\n    this.dataTypeIDs = new Array(this.parameterCount)\n  }\n}\n\nexport class ParameterStatusMessage implements BackendMessage {\n  public readonly name: MessageName = 'parameterStatus'\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string,\n  ) {}\n}\n\nexport class BackendKeyDataMessage implements BackendMessage {\n  public readonly name: MessageName = 'backendKeyData'\n  constructor(\n    public readonly length: number,\n    public readonly processID: number,\n    public readonly secretKey: number,\n  ) {}\n}\n\nexport class NotificationResponseMessage implements BackendMessage {\n  public readonly name: MessageName = 'notification'\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string,\n  ) {}\n}\n\nexport class ReadyForQueryMessage implements BackendMessage {\n  public readonly name: MessageName = 'readyForQuery'\n  constructor(\n    public readonly length: number,\n    public readonly status: string,\n  ) {}\n}\n\nexport class CommandCompleteMessage implements BackendMessage {\n  public readonly name: MessageName = 'commandComplete'\n  constructor(\n    public readonly length: number,\n    public readonly text: string,\n  ) {}\n}\n\nexport class DataRowMessage implements BackendMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = 'dataRow'\n  constructor(\n    public length: number,\n    public fields: (string | null)[],\n  ) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(\n    public readonly length: number,\n    public readonly message: string | undefined,\n  ) {}\n  public readonly name = 'notice'\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n","export { serialize } from './serializer'\nexport { Parser } from './parser'\nexport * as messages from './messages'\n","import { Writer } from './buffer-writer'\nimport { byteLengthUtf8 } from './string-utils'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\ntype LegalValue = string | ArrayBuffer | ArrayBufferView | null\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Uint8Array => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  const bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  const length = bodyBuffer.byteLength + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Uint8Array => {\n  const bufferView = new DataView(new ArrayBuffer(8))\n  bufferView.setInt32(0, 8, false)\n  bufferView.setInt32(4, 80877103, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\nconst password = (password: string): Uint8Array => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = (\n  mechanism: string,\n  initialResponse: string,\n): Uint8Array => {\n  // 0x70 = 'p'\n  writer\n    .addCString(mechanism)\n    .addInt32(byteLengthUtf8(initialResponse))\n    .addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = (additionalData: string): Uint8Array => {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Uint8Array => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyValueArray: LegalValue[] = []\n\nconst parse = (query: ParseOpts): Uint8Array => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name ?? ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error(\n      'Warning! Postgres only supports 63 characters for query names.',\n    )\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error(\n      'This can cause conflicts and silent errors executing queries',\n    )\n    /* eslint-enable no-console */\n  }\n\n  const buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(query.types?.length ?? 0)\n\n  query.types?.forEach((type) => buffer.addInt32(type))\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: unknown, index: number) => LegalValue\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: LegalValue[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = (values: LegalValue[], valueMapper?: ValueMapper): void => {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal === null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (\n      mappedVal instanceof ArrayBuffer ||\n      ArrayBuffer.isView(mappedVal)\n    ) {\n      const buffer = ArrayBuffer.isView(mappedVal)\n        ? mappedVal.buffer.slice(\n            mappedVal.byteOffset,\n            mappedVal.byteOffset + mappedVal.byteLength,\n          )\n        : mappedVal\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(buffer.byteLength)\n      paramWriter.add(buffer)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(byteLengthUtf8(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Uint8Array => {\n  // normalize config\n  const portal = config.portal ?? ''\n  const statement = config.statement ?? ''\n  const binary = config.binary ?? false\n  const values = config.values ?? emptyValueArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = new Uint8Array([\n  code.execute,\n  0x00,\n  0x00,\n  0x00,\n  0x09,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n])\n\nconst execute = (config?: ExecOpts): Uint8Array => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal ?? ''\n  const rows = config.rows ?? 0\n\n  const portalLength = byteLengthUtf8(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const bufferView = new DataView(new ArrayBuffer(1 + len))\n  bufferView.setUint8(0, code.execute)\n  bufferView.setInt32(1, len, false)\n  new TextEncoder().encodeInto(portal, new Uint8Array(bufferView.buffer, 5))\n  bufferView.setUint8(portalLength + 5, 0) // null terminate portal cString\n  bufferView.setUint32(bufferView.byteLength - 4, rows, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\nconst cancel = (processID: number, secretKey: number): Uint8Array => {\n  const bufferView = new DataView(new ArrayBuffer(16))\n  bufferView.setInt32(0, 16, false)\n  bufferView.setInt16(4, 1234, false)\n  bufferView.setInt16(6, 5678, false)\n  bufferView.setInt32(8, processID, false)\n  bufferView.setInt32(12, secretKey, false)\n  return new Uint8Array(bufferView.buffer)\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Uint8Array => {\n  const writer = new Writer()\n  writer.addCString(string)\n  return writer.flush(code)\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Uint8Array => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name ?? ''}`)\n    : msg.type === 'P'\n      ? emptyDescribePortal\n      : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Uint8Array => {\n  const text = `${msg.type}${msg.name ?? ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: ArrayBuffer): Uint8Array => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Uint8Array => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Uint8Array =>\n  new Uint8Array([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n","import { byteLengthUtf8 } from './string-utils'\n\nexport class Writer {\n  #bufferView: DataView\n  #offset: number = 5\n\n  readonly #littleEndian = false as const\n  readonly #encoder = new TextEncoder()\n  readonly #headerPosition: number = 0\n  constructor(private size = 256) {\n    this.#bufferView = this.#allocateBuffer(size)\n  }\n\n  #allocateBuffer(size: number): DataView {\n    return new DataView(new ArrayBuffer(size))\n  }\n\n  #ensure(size: number): void {\n    const remaining = this.#bufferView.byteLength - this.#offset\n    if (remaining < size) {\n      const oldBuffer = this.#bufferView.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      const newSize = oldBuffer.byteLength + (oldBuffer.byteLength >> 1) + size\n      this.#bufferView = this.#allocateBuffer(newSize)\n      new Uint8Array(this.#bufferView.buffer).set(new Uint8Array(oldBuffer))\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.#ensure(4)\n    this.#bufferView.setInt32(this.#offset, num, this.#littleEndian)\n    this.#offset += 4\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.#ensure(2)\n    this.#bufferView.setInt16(this.#offset, num, this.#littleEndian)\n    this.#offset += 2\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (string) {\n      // TODO(msfstef): might be faster to extract `addString` code and\n      // ensure length + 1 once rather than length and then +1?\n      this.addString(string)\n    }\n\n    // set null terminator\n    this.#ensure(1)\n    this.#bufferView.setUint8(this.#offset, 0)\n    this.#offset++\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    const length = byteLengthUtf8(string)\n    this.#ensure(length)\n    this.#encoder.encodeInto(\n      string,\n      new Uint8Array(this.#bufferView.buffer, this.#offset),\n    )\n    this.#offset += length\n    return this\n  }\n\n  public add(otherBuffer: ArrayBuffer): Writer {\n    this.#ensure(otherBuffer.byteLength)\n    new Uint8Array(this.#bufferView.buffer).set(\n      new Uint8Array(otherBuffer),\n      this.#offset,\n    )\n\n    this.#offset += otherBuffer.byteLength\n    return this\n  }\n\n  #join(code?: number): ArrayBuffer {\n    if (code) {\n      this.#bufferView.setUint8(this.#headerPosition, code)\n      // length is everything in this packet minus the code\n      const length = this.#offset - (this.#headerPosition + 1)\n      this.#bufferView.setInt32(\n        this.#headerPosition + 1,\n        length,\n        this.#littleEndian,\n      )\n    }\n    return this.#bufferView.buffer.slice(code ? 0 : 5, this.#offset)\n  }\n\n  public flush(code?: number): Uint8Array {\n    const result = this.#join(code)\n    this.#offset = 5\n    this.#bufferView = this.#allocateBuffer(this.size)\n    return new Uint8Array(result)\n  }\n}\n","/**\n * Calculates the byte length of a UTF-8 encoded string\n * Adapted from https://stackoverflow.com/a/23329386\n * @param str - UTF-8 encoded string\n * @returns byte length of string\n */\nfunction byteLengthUtf8(str: string): number {\n  let byteLength = str.length\n  for (let i = str.length - 1; i >= 0; i--) {\n    const code = str.charCodeAt(i)\n    if (code > 0x7f && code <= 0x7ff) byteLength++\n    else if (code > 0x7ff && code <= 0xffff) byteLength += 2\n    if (code >= 0xdc00 && code <= 0xdfff) i-- // trail surrogate\n  }\n  return byteLength\n}\n\nexport { byteLengthUtf8 }\n","import {\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  NoticeMessage,\n  AuthenticationMessage,\n  AuthenticationOk,\n  AuthenticationCleartextPassword,\n  AuthenticationMD5Password,\n  AuthenticationSASL,\n  AuthenticationSASLContinue,\n  AuthenticationSASLFinal,\n} from './messages'\nimport { BufferParameter, Modes } from './types'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1 as const\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4 as const\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: ArrayBuffer\n}\n\nconst emptyBuffer = new ArrayBuffer(0)\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  #bufferView: DataView = new DataView(emptyBuffer)\n  #bufferRemainingLength: number = 0\n  #bufferOffset: number = 0\n  #reader = new BufferReader()\n\n  public parse(buffer: BufferParameter, callback: MessageCallback) {\n    this.#mergeBuffer(\n      ArrayBuffer.isView(buffer)\n        ? buffer.buffer.slice(\n            buffer.byteOffset,\n            buffer.byteOffset + buffer.byteLength,\n          )\n        : buffer,\n    )\n    const bufferFullLength = this.#bufferOffset + this.#bufferRemainingLength\n    let offset = this.#bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.#bufferView.getUint8(offset)\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.#bufferView.getUint32(offset + CODE_LENGTH, false)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.#handlePacket(\n          offset + HEADER_LENGTH,\n          code,\n          length,\n          this.#bufferView.buffer,\n        )\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.#bufferView = new DataView(emptyBuffer)\n      this.#bufferRemainingLength = 0\n      this.#bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.#bufferRemainingLength = bufferFullLength - offset\n      this.#bufferOffset = offset\n    }\n  }\n\n  #mergeBuffer(buffer: ArrayBuffer): void {\n    if (this.#bufferRemainingLength > 0) {\n      const newLength = this.#bufferRemainingLength + buffer.byteLength\n      const newFullLength = newLength + this.#bufferOffset\n      if (newFullLength > this.#bufferView.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: ArrayBuffer\n        if (\n          newLength <= this.#bufferView.byteLength &&\n          this.#bufferOffset >= this.#bufferRemainingLength\n        ) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.#bufferView.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.#bufferView.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = new ArrayBuffer(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        new Uint8Array(newBuffer).set(\n          new Uint8Array(\n            this.#bufferView.buffer,\n            this.#bufferOffset,\n            this.#bufferRemainingLength,\n          ),\n        )\n        this.#bufferView = new DataView(newBuffer)\n        this.#bufferOffset = 0\n      }\n\n      // Concat the new buffer with the remaining one\n      new Uint8Array(this.#bufferView.buffer).set(\n        new Uint8Array(buffer),\n        this.#bufferOffset + this.#bufferRemainingLength,\n      )\n      this.#bufferRemainingLength = newLength\n    } else {\n      this.#bufferView = new DataView(buffer)\n      this.#bufferOffset = 0\n      this.#bufferRemainingLength = buffer.byteLength\n    }\n  }\n\n  #handlePacket(\n    offset: number,\n    code: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.#parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.#parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.#parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.#parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.#parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.#parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.#parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.#parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.#parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.#parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.#parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.#parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.#parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.#parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError(\n          'received invalid response: ' + code.toString(16),\n          length,\n          'error',\n        )\n    }\n  }\n\n  #parseReadyForQueryMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const status = this.#reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  #parseCommandCompleteMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const text = this.#reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  #parseCopyData(offset: number, length: number, bytes: ArrayBuffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, new Uint8Array(chunk))\n  }\n\n  #parseCopyInMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    return this.#parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  #parseCopyOutMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    return this.#parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  #parseCopyMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n    messageName: MessageName,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const isBinary = this.#reader.byte() !== 0\n    const columnCount = this.#reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.#reader.int16()\n    }\n    return message\n  }\n\n  #parseNotificationMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const processId = this.#reader.int32()\n    const channel = this.#reader.cstring()\n    const payload = this.#reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  #parseRowDescriptionMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const fieldCount = this.#reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.#parseField()\n    }\n    return message\n  }\n\n  #parseField(): Field {\n    const name = this.#reader.cstring()\n    const tableID = this.#reader.int32()\n    const columnID = this.#reader.int16()\n    const dataTypeID = this.#reader.int32()\n    const dataTypeSize = this.#reader.int16()\n    const dataTypeModifier = this.#reader.int32()\n    const mode = this.#reader.int16() === 0 ? Modes.text : Modes.binary\n    return new Field(\n      name,\n      tableID,\n      columnID,\n      dataTypeID,\n      dataTypeSize,\n      dataTypeModifier,\n      mode,\n    )\n  }\n\n  #parseParameterDescriptionMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const parameterCount = this.#reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.#reader.int32()\n    }\n    return message\n  }\n\n  #parseDataRowMessage(offset: number, length: number, bytes: ArrayBuffer) {\n    this.#reader.setBuffer(offset, bytes)\n    const fieldCount = this.#reader.int16()\n    const fields: (string | null)[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.#reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.#reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  #parseParameterStatusMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const name = this.#reader.cstring()\n    const value = this.#reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  #parseBackendKeyData(offset: number, length: number, bytes: ArrayBuffer) {\n    this.#reader.setBuffer(offset, bytes)\n    const processID = this.#reader.int32()\n    const secretKey = this.#reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  #parseAuthenticationResponse(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n  ): AuthenticationMessage {\n    this.#reader.setBuffer(offset, bytes)\n    const code = this.#reader.int32()\n    switch (code) {\n      case 0:\n        return new AuthenticationOk(length)\n      case 3:\n        return new AuthenticationCleartextPassword(length)\n\n      case 5:\n        return new AuthenticationMD5Password(length, this.#reader.bytes(4))\n\n      case 10: {\n        const mechanisms: string[] = []\n        while (true) {\n          const mechanism = this.#reader.cstring()\n          if (mechanism.length === 0) {\n            return new AuthenticationSASL(length, mechanisms)\n          }\n          mechanisms.push(mechanism)\n        }\n      }\n      case 11:\n        return new AuthenticationSASLContinue(\n          length,\n          this.#reader.string(length - 8),\n        )\n\n      case 12:\n        return new AuthenticationSASLFinal(\n          length,\n          this.#reader.string(length - 8),\n        )\n\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n  }\n\n  #parseErrorMessage(\n    offset: number,\n    length: number,\n    bytes: ArrayBuffer,\n    name: MessageName,\n  ) {\n    this.#reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.#reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.#reader.cstring()\n      fieldType = this.#reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice'\n        ? new NoticeMessage(length, messageValue)\n        : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n","export const Modes = {\n  text: 0,\n  binary: 1,\n} as const\n\nexport type Mode = (typeof Modes)[keyof typeof Modes]\n\nexport type BufferParameter = ArrayBuffer | ArrayBufferView\n","const emptyBuffer = new ArrayBuffer(0)\n\nexport class BufferReader {\n  #bufferView: DataView = new DataView(emptyBuffer)\n  #offset: number\n\n  // TODO(bmc): support non-utf8 encoding?\n  readonly #encoding: string = 'utf-8' as const\n  readonly #decoder = new TextDecoder(this.#encoding)\n  readonly #littleEndian: boolean = false as const\n\n  constructor(offset: number = 0) {\n    this.#offset = offset\n  }\n\n  public setBuffer(offset: number, buffer: ArrayBuffer): void {\n    this.#offset = offset\n    this.#bufferView = new DataView(buffer)\n  }\n\n  public int16(): number {\n    // const result = this.buffer.readInt16BE(this.#offset)\n    const result = this.#bufferView.getInt16(this.#offset, this.#littleEndian)\n    this.#offset += 2\n    return result\n  }\n\n  public byte(): number {\n    // const result = this.bufferView[this.#offset]\n    const result = this.#bufferView.getUint8(this.#offset)\n    this.#offset++\n    return result\n  }\n\n  public int32(): number {\n    // const result = this.buffer.readInt32BE(this.#offset)\n    const result = this.#bufferView.getInt32(this.#offset, this.#littleEndian)\n    this.#offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    // const result = this.#bufferView.toString(\n    //   this.#encoding,\n    //   this.#offset,\n    //   this.#offset + length,\n    // )\n    // this.#offset += length\n\n    const result = this.#decoder.decode(this.bytes(length))\n    return result\n  }\n\n  public cstring(): string {\n    // const start = this.#offset\n    // let end = start\n    // while (this.#bufferView[end++] !== 0) {}\n\n    const start = this.#offset\n    let end = start\n    while (this.#bufferView.getUint8(end++) !== 0) {\n      // no-op - increment until terminator reached\n    }\n    const result = this.string(end - start - 1)\n    this.#offset = end\n    return result\n  }\n\n  public bytes(length: number): Uint8Array {\n    // const result = this.buffer.slice(this.#offset, this.#offset + length)\n    const result = this.#bufferView.buffer.slice(\n      this.#offset,\n      this.#offset + length,\n    )\n    this.#offset += length\n    return new Uint8Array(result)\n  }\n}\n","/*\nBased on postgres.js types.js\nhttps://github.com/porsager/postgres/blob/master/src/types.js\nPublished under the Unlicense:\nhttps://github.com/porsager/postgres/blob/master/UNLICENSE \n*/\n\nimport type { ParserOptions } from './interface.js'\n\nconst JSON_parse = globalThis.JSON.parse\nconst JSON_stringify = globalThis.JSON.stringify\n\nexport const BOOL = 16,\n  BYTEA = 17,\n  CHAR = 18,\n  INT8 = 20,\n  INT2 = 21,\n  INT4 = 23,\n  REGPROC = 24,\n  TEXT = 25,\n  OID = 26,\n  TID = 27,\n  XID = 28,\n  CID = 29,\n  JSON = 114,\n  XML = 142,\n  PG_NODE_TREE = 194,\n  SMGR = 210,\n  PATH = 602,\n  POLYGON = 604,\n  CIDR = 650,\n  FLOAT4 = 700,\n  FLOAT8 = 701,\n  ABSTIME = 702,\n  RELTIME = 703,\n  TINTERVAL = 704,\n  CIRCLE = 718,\n  MACADDR8 = 774,\n  MONEY = 790,\n  MACADDR = 829,\n  INET = 869,\n  ACLITEM = 1033,\n  BPCHAR = 1042,\n  VARCHAR = 1043,\n  DATE = 1082,\n  TIME = 1083,\n  TIMESTAMP = 1114,\n  TIMESTAMPTZ = 1184,\n  INTERVAL = 1186,\n  TIMETZ = 1266,\n  BIT = 1560,\n  VARBIT = 1562,\n  NUMERIC = 1700,\n  REFCURSOR = 1790,\n  REGPROCEDURE = 2202,\n  REGOPER = 2203,\n  REGOPERATOR = 2204,\n  REGCLASS = 2205,\n  REGTYPE = 2206,\n  UUID = 2950,\n  TXID_SNAPSHOT = 2970,\n  PG_LSN = 3220,\n  PG_NDISTINCT = 3361,\n  PG_DEPENDENCIES = 3402,\n  TSVECTOR = 3614,\n  TSQUERY = 3615,\n  GTSVECTOR = 3642,\n  REGCONFIG = 3734,\n  REGDICTIONARY = 3769,\n  JSONB = 3802,\n  REGNAMESPACE = 4089,\n  REGROLE = 4096\n\nexport const types = {\n  string: {\n    to: TEXT,\n    from: [TEXT, VARCHAR, BPCHAR],\n    serialize: (x: string | number) => {\n      if (typeof x === 'string') {\n        return x\n      } else if (typeof x === 'number') {\n        return x.toString()\n      } else {\n        throw new Error('Invalid input for string type')\n      }\n    },\n    parse: (x: string) => x,\n  },\n  number: {\n    to: 0,\n    from: [INT2, INT4, OID, FLOAT4, FLOAT8],\n    serialize: (x: number) => x.toString(),\n    parse: (x: string) => +x,\n  },\n  bigint: {\n    to: INT8,\n    from: [INT8],\n    serialize: (x: bigint) => x.toString(),\n    parse: (x: string) => {\n      const n = BigInt(x)\n      if (n < Number.MIN_SAFE_INTEGER || n > Number.MAX_SAFE_INTEGER) {\n        return n // return BigInt\n      } else {\n        return Number(n) // in range of standard JS numbers so return number\n      }\n    },\n  },\n  json: {\n    to: JSON,\n    from: [JSON, JSONB],\n    serialize: (x: any) => {\n      if (typeof x === 'string') {\n        return x\n      } else {\n        return JSON_stringify(x)\n      }\n    },\n    parse: (x: string) => JSON_parse(x),\n  },\n  boolean: {\n    to: BOOL,\n    from: [BOOL],\n    serialize: (x: boolean) => {\n      if (typeof x !== 'boolean') {\n        throw new Error('Invalid input for boolean type')\n      }\n      return x ? 't' : 'f'\n    },\n    parse: (x: string) => x === 't',\n  },\n  date: {\n    to: TIMESTAMPTZ,\n    from: [DATE, TIMESTAMP, TIMESTAMPTZ],\n    serialize: (x: Date | string | number) => {\n      if (typeof x === 'string') {\n        return x\n      } else if (typeof x === 'number') {\n        return new Date(x).toISOString()\n      } else if (x instanceof Date) {\n        return x.toISOString()\n      } else {\n        throw new Error('Invalid input for date type')\n      }\n    },\n    parse: (x: string | number) => new Date(x),\n  },\n  bytea: {\n    to: BYTEA,\n    from: [BYTEA],\n    serialize: (x: Uint8Array) => {\n      if (!(x instanceof Uint8Array)) {\n        throw new Error('Invalid input for bytea type')\n      }\n      return (\n        '\\\\x' +\n        Array.from(x)\n          .map((byte) => byte.toString(16).padStart(2, '0'))\n          .join('')\n      )\n    },\n    parse: (x: string): Uint8Array => {\n      const hexString = x.slice(2)\n      return Uint8Array.from({ length: hexString.length / 2 }, (_, idx) =>\n        parseInt(hexString.substring(idx * 2, (idx + 1) * 2), 16),\n      )\n    },\n  },\n} satisfies TypeHandlers\n\nexport type Parser = (x: string, typeId?: number) => any\nexport type Serializer = (x: any) => string\n\nexport type TypeHandler = {\n  to: number\n  from: number | number[]\n  serialize: Serializer\n  parse: Parser\n}\n\nexport type TypeHandlers = {\n  [key: string]: TypeHandler\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport const parsers = defaultHandlers.parsers\nexport const serializers = defaultHandlers.serializers\n\nexport function parseType(\n  x: string | null,\n  type: number,\n  parsers?: ParserOptions,\n): any {\n  if (x === null) {\n    return null\n  }\n  const handler = parsers?.[type] ?? defaultHandlers.parsers[type]\n  if (handler) {\n    return handler(x, type)\n  } else {\n    return x\n  }\n}\n\nfunction typeHandlers(types: TypeHandlers) {\n  return Object.keys(types).reduce(\n    ({ parsers, serializers }, k) => {\n      const { to, from, serialize, parse } = types[k]\n      serializers[to] = serialize\n      serializers[k] = serialize\n      parsers[k] = parse\n      if (Array.isArray(from)) {\n        from.forEach((f) => {\n          parsers[f] = parse\n          serializers[f] = serialize\n        })\n      } else {\n        parsers[from] = parse\n        serializers[from] = serialize\n      }\n      return { parsers, serializers }\n    },\n    {\n      parsers: {} as {\n        [key: number | string]: (x: string, typeId?: number) => any\n      },\n      serializers: {} as {\n        [key: number | string]: Serializer\n      },\n    },\n  )\n}\n\nconst escapeBackslash = /\\\\/g\nconst escapeQuote = /\"/g\n\nfunction arrayEscape(x: string) {\n  return x.replace(escapeBackslash, '\\\\\\\\').replace(escapeQuote, '\\\\\"')\n}\n\nexport function arraySerializer(\n  xs: any,\n  serializer: Serializer | undefined,\n  typarray: number,\n): string {\n  if (Array.isArray(xs) === false) return xs\n\n  if (!xs.length) return '{}'\n\n  const first = xs[0]\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n\n  if (Array.isArray(first)) {\n    return `{${xs.map((x) => arraySerializer(x, serializer, typarray)).join(delimiter)}}`\n  } else {\n    return `{${xs\n      .map((x) => {\n        if (x === undefined) {\n          x = null\n          // TODO: Add an option to specify how to handle undefined values\n        }\n        return x === null\n          ? 'null'\n          : '\"' + arrayEscape(serializer ? serializer(x) : x.toString()) + '\"'\n      })\n      .join(delimiter)}}`\n  }\n}\n\nconst arrayParserState = {\n  i: 0,\n  char: null as string | null,\n  str: '',\n  quoted: false,\n  last: 0,\n  p: null as string | null,\n}\n\nexport function arrayParser(x: string, parser: Parser, typarray: number) {\n  arrayParserState.i = arrayParserState.last = 0\n  return arrayParserLoop(arrayParserState, x, parser, typarray)[0]\n}\n\nfunction arrayParserLoop(\n  s: typeof arrayParserState,\n  x: string,\n  parser: Parser | undefined,\n  typarray: number,\n): any[] {\n  const xs = []\n  // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n  const delimiter = typarray === 1020 ? ';' : ','\n  for (; s.i < x.length; s.i++) {\n    s.char = x[s.i]\n    if (s.quoted) {\n      if (s.char === '\\\\') {\n        s.str += x[++s.i]\n      } else if (s.char === '\"') {\n        xs.push(parser ? parser(s.str) : s.str)\n        s.str = ''\n        s.quoted = x[s.i + 1] === '\"'\n        s.last = s.i + 2\n      } else {\n        s.str += s.char\n      }\n    } else if (s.char === '\"') {\n      s.quoted = true\n    } else if (s.char === '{') {\n      s.last = ++s.i\n      xs.push(arrayParserLoop(s, x, parser, typarray))\n    } else if (s.char === '}') {\n      s.quoted = false\n      s.last < s.i &&\n        xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n      break\n    } else if (s.char === delimiter && s.p !== '}' && s.p !== '\"') {\n      xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i))\n      s.last = s.i + 1\n    }\n    s.p = s.char\n  }\n  s.last < s.i &&\n    xs.push(\n      parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1),\n    )\n  return xs\n}\n","import {\n  BackendMessage,\n  RowDescriptionMessage,\n  DataRowMessage,\n  CommandCompleteMessage,\n  ParameterDescriptionMessage,\n} from '@electric-sql/pg-protocol/messages'\nimport type { Results, QueryOptions } from './interface.js'\nimport { parseType, type Parser } from './types.js'\n\n/**\n * This function is used to parse the results of either a simple or extended query.\n * https://www.postgresql.org/docs/current/protocol-flow.html#PROTOCOL-FLOW-SIMPLE-QUERY\n */\nexport function parseResults(\n  messages: Array<BackendMessage>,\n  defaultParsers: Record<number | string, Parser>,\n  options?: QueryOptions,\n  blob?: Blob,\n): Array<Results> {\n  const resultSets: Results[] = []\n  let currentResultSet: Results = { rows: [], fields: [] }\n  let affectedRows = 0\n  const parsers = { ...defaultParsers, ...options?.parsers }\n\n  const filteredMessages = messages.filter(\n    (msg) =>\n      msg.name === 'rowDescription' ||\n      msg.name === 'dataRow' ||\n      msg.name === 'commandComplete',\n  )\n\n  filteredMessages.forEach((message, index) => {\n    if (message.name === 'rowDescription') {\n      const msg = message as RowDescriptionMessage\n      currentResultSet.fields = msg.fields.map((field) => ({\n        name: field.name,\n        dataTypeID: field.dataTypeID,\n      }))\n    } else if (message.name === 'dataRow' && currentResultSet) {\n      const msg = message as DataRowMessage\n      if (options?.rowMode === 'array') {\n        currentResultSet.rows.push(\n          msg.fields.map((field, i) =>\n            parseType(field, currentResultSet!.fields[i].dataTypeID, parsers),\n          ),\n        )\n      } else {\n        // rowMode === \"object\"\n        currentResultSet.rows.push(\n          Object.fromEntries(\n            msg.fields.map((field, i) => [\n              currentResultSet!.fields[i].name,\n              parseType(field, currentResultSet!.fields[i].dataTypeID, parsers),\n            ]),\n          ),\n        )\n      }\n    } else if (message.name === 'commandComplete') {\n      const msg = message as CommandCompleteMessage\n      affectedRows += retrieveRowCount(msg)\n\n      if (index === filteredMessages.length - 1)\n        resultSets.push({\n          ...currentResultSet,\n          affectedRows,\n          ...(blob ? { blob } : {}),\n        })\n      else resultSets.push(currentResultSet)\n\n      currentResultSet = { rows: [], fields: [] }\n    }\n  })\n\n  if (resultSets.length === 0) {\n    resultSets.push({\n      rows: [],\n      fields: [],\n    })\n  }\n\n  return resultSets\n}\n\nfunction retrieveRowCount(msg: CommandCompleteMessage): number {\n  const parts = msg.text.split(' ')\n  switch (parts[0]) {\n    case 'INSERT':\n      return parseInt(parts[2], 10)\n    case 'UPDATE':\n    case 'DELETE':\n      return parseInt(parts[1], 10)\n    default:\n      return 0\n  }\n}\n\n/** Get the dataTypeIDs from a list of messages, if it's available. */\nexport function parseDescribeStatementResults(\n  messages: Array<BackendMessage>,\n): number[] {\n  const message = messages.find(\n    (msg): msg is ParameterDescriptionMessage =>\n      msg.name === 'parameterDescription',\n  )\n\n  if (message) {\n    return message.dataTypeIDs\n  }\n\n  return []\n}\n","import type { PGliteInterface, Transaction } from './interface.js'\nimport { serialize as serializeProtocol } from '@electric-sql/pg-protocol'\nimport { parseDescribeStatementResults } from './parse.js'\nimport { TEXT } from './types.js'\n\nexport const IN_NODE =\n  typeof process === 'object' &&\n  typeof process.versions === 'object' &&\n  typeof process.versions.node === 'string'\n\nlet wasmDownloadPromise: Promise<Response> | undefined\n\nexport async function startWasmDownload() {\n  if (IN_NODE || wasmDownloadPromise) {\n    return\n  }\n  const moduleUrl = new URL('../release/postgres.wasm', import.meta.url)\n  wasmDownloadPromise = fetch(moduleUrl)\n}\n\n// This is a global cache of the PGlite Wasm module to avoid having to re-download or\n// compile it on subsequent calls.\nlet cachedWasmModule: WebAssembly.Module | undefined\n\nexport async function instantiateWasm(\n  imports: WebAssembly.Imports,\n  module?: WebAssembly.Module,\n): Promise<{\n  instance: WebAssembly.Instance\n  module: WebAssembly.Module\n}> {\n  if (module || cachedWasmModule) {\n    WebAssembly.instantiate(module || cachedWasmModule!, imports)\n    return {\n      instance: await WebAssembly.instantiate(\n        module || cachedWasmModule!,\n        imports,\n      ),\n      module: module || cachedWasmModule!,\n    }\n  }\n  const moduleUrl = new URL('../release/postgres.wasm', import.meta.url)\n  if (IN_NODE) {\n    const fs = await import('fs/promises')\n    const buffer = await fs.readFile(moduleUrl)\n    const { module: newModule, instance } = await WebAssembly.instantiate(\n      buffer,\n      imports,\n    )\n    cachedWasmModule = newModule\n    return {\n      instance,\n      module: newModule,\n    }\n  } else {\n    if (!wasmDownloadPromise) {\n      wasmDownloadPromise = fetch(moduleUrl)\n    }\n    const response = await wasmDownloadPromise\n    const { module: newModule, instance } =\n      await WebAssembly.instantiateStreaming(response, imports)\n    cachedWasmModule = newModule\n    return {\n      instance,\n      module: newModule,\n    }\n  }\n}\n\nexport async function getFsBundle(): Promise<ArrayBuffer> {\n  const fsBundleUrl = new URL('../release/postgres.data', import.meta.url)\n  if (IN_NODE) {\n    const fs = await import('fs/promises')\n    const fileData = await fs.readFile(fsBundleUrl)\n    return fileData.buffer\n  } else {\n    const response = await fetch(fsBundleUrl)\n    return response.arrayBuffer()\n  }\n}\n\nexport const uuid = (): string => {\n  // best case, `crypto.randomUUID` is available\n  if (globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID()\n  }\n\n  const bytes = new Uint8Array(16)\n\n  if (globalThis.crypto?.getRandomValues) {\n    // `crypto.getRandomValues` is available even in non-secure contexts\n    globalThis.crypto.getRandomValues(bytes)\n  } else {\n    // fallback to Math.random, if the Crypto API is completely missing\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.floor(Math.random() * 256)\n    }\n  }\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x40 // Set the 4 most significant bits to 0100\n  bytes[8] = (bytes[8] & 0x3f) | 0x80 // Set the 2 most significant bits to 10\n\n  const hexValues: string[] = []\n  bytes.forEach((byte) => {\n    hexValues.push(byte.toString(16).padStart(2, '0'))\n  })\n\n  return (\n    hexValues.slice(0, 4).join('') +\n    '-' +\n    hexValues.slice(4, 6).join('') +\n    '-' +\n    hexValues.slice(6, 8).join('') +\n    '-' +\n    hexValues.slice(8, 10).join('') +\n    '-' +\n    hexValues.slice(10).join('')\n  )\n}\n\n/**\n * Formats a query with parameters\n * Expects that any tables/relations referenced in the query exist in the database\n * due to requiring them to be present to describe the parameters types.\n * `tx` is optional, and to be used when formatQuery is called during a transaction.\n * @param pg - The PGlite instance\n * @param query - The query to format\n * @param params - The parameters to format the query with\n * @param tx - The transaction to use, defaults to the PGlite instance\n * @returns The formatted query\n */\nexport async function formatQuery(\n  pg: PGliteInterface,\n  query: string,\n  params?: any[] | null,\n  tx?: Transaction | PGliteInterface,\n) {\n  if (!params || params.length === 0) {\n    // no params so no formatting needed\n    return query\n  }\n\n  tx = tx ?? pg\n\n  // Get the types of the parameters\n  let dataTypeIDs: number[]\n  try {\n    await pg.execProtocol(serializeProtocol.parse({ text: query }), {\n      syncToFs: false,\n    })\n\n    dataTypeIDs = parseDescribeStatementResults(\n      (\n        await pg.execProtocol(serializeProtocol.describe({ type: 'S' }), {\n          syncToFs: false,\n        })\n      ).messages,\n    )\n  } finally {\n    await pg.execProtocol(serializeProtocol.sync(), { syncToFs: false })\n  }\n\n  // replace $1, $2, etc with  %1L, %2L, etc\n  const subbedQuery = query.replace(/\\$([0-9]+)/g, (_, num) => {\n    return '%' + num + 'L'\n  })\n\n  const ret = await tx.query<{\n    query: string\n  }>(\n    `SELECT format($1, ${params.map((_, i) => `$${i + 2}`).join(', ')}) as query`,\n    [subbedQuery, ...params],\n    { paramTypes: [TEXT, ...dataTypeIDs] },\n  )\n  return ret.rows[0].query\n}\n"],"mappings":"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","names":["password","query","writer","_bufferView","_offset","_littleEndian","emptyBuffer","_bufferView","emptyBuffer","parsers","types","serializers","serialize","parse","parsers","query"]}